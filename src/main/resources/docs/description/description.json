[ {
  "patternId" : "Drupal_Arrays_Array",
  "title" : "Arrays: Array",
  "description" : "ArraySniff."
}, {
  "patternId" : "Drupal_Arrays_DisallowLongArraySyntax",
  "title" : "Arrays: Disallow Long Array Syntax",
  "description" : "Bans the use of the PHP long array syntax in Drupal 8."
}, {
  "patternId" : "Drupal_CSS_ClassDefinitionNameSpacing",
  "title" : "CSS: Class Definition Name Spacing",
  "description" : "Ensure there are no blank lines between the names of classes/IDs. Copied from\n\\PHP_CodeSniffer\\Standards\\Squiz\\Sniffs\\CSS\\ClassDefinitionNameSpacingSniff\nbecause we also check for comma separated selectors on their own line."
}, {
  "patternId" : "Drupal_CSS_ColourDefinition",
  "title" : "CSS: Colour Definition"
}, {
  "patternId" : "Drupal_Classes_ClassCreateInstance",
  "title" : "Classes: Class Create Instance",
  "description" : "Class create instance Test."
}, {
  "patternId" : "Drupal_Classes_ClassDeclaration",
  "title" : "Classes: Class Declaration",
  "description" : "Class Declaration Test."
}, {
  "patternId" : "Drupal_Classes_ClassFileName",
  "title" : "Classes: Class File Name"
}, {
  "patternId" : "Drupal_Classes_FullyQualifiedNamespace",
  "title" : "Classes: Fully Qualified Namespace",
  "description" : "Checks that class references do not use FQN but use statements."
}, {
  "patternId" : "Drupal_Classes_InterfaceName",
  "title" : "Classes: Interface Name",
  "description" : "Checks that interface names end with \"Interface\"."
}, {
  "patternId" : "Drupal_Classes_PropertyDeclaration",
  "title" : "Classes: Property Declaration",
  "description" : "Laregely copied from\n\\PHP_CodeSniffer\\Standards\\PSR2\\Sniffs\\Classes\\PropertyDeclarationSniff to have a fixer\nfor the var keyword."
}, {
  "patternId" : "Drupal_Classes_UnusedUseStatement",
  "title" : "Classes: Unused Use Statement",
  "description" : "Checks for \"use\" statements that are not needed in a file."
}, {
  "patternId" : "Drupal_Classes_UseLeadingBackslash",
  "title" : "Classes: Use Leading Backslash",
  "description" : "Use statements to import classes must not begin with \"\\\"."
}, {
  "patternId" : "Drupal_Commenting_ClassComment",
  "title" : "Commenting: Class Comment",
  "description" : "Checks that comment doc blocks exist on classes, interfaces and traits. Largely\ncopied from PHP_CodeSniffer\\Standards\\Squiz\\Sniffs\\Commenting\\ClassCommentSniff."
}, {
  "patternId" : "Drupal_Commenting_DataTypeNamespace",
  "title" : "Commenting: Data Type Namespace",
  "description" : "Checks that data types in param, return, var, and throws tags are fully namespaced."
}, {
  "patternId" : "Drupal_Commenting_Deprecated",
  "title" : "Commenting: Deprecated",
  "description" : "Ensures standard format of a @deprecated text."
}, {
  "patternId" : "Drupal_Commenting_DocComment",
  "title" : "Commenting: Doc Comment",
  "description" : "Ensures doc blocks follow basic formatting."
}, {
  "patternId" : "Drupal_Commenting_DocCommentAlignment",
  "title" : "Commenting: Doc Comment Alignment",
  "description" : "Largely copied from\n\\PHP_CodeSniffer\\Standards\\Squiz\\Sniffs\\Commenting\\DocCommentAlignmentSniff to also\nhandle the \"var\" keyword. See\nhttps://github.com/squizlabs/PHP_CodeSniffer/pull/1212"
}, {
  "patternId" : "Drupal_Commenting_DocCommentStar",
  "title" : "Commenting: Doc Comment Star",
  "description" : "Checks that a doc comment block has a doc comment star on every line."
}, {
  "patternId" : "Drupal_Commenting_FileComment",
  "title" : "Commenting: File Comment",
  "description" : "Parses and verifies the doc comments for files."
}, {
  "patternId" : "Drupal_Commenting_FunctionComment",
  "title" : "Commenting: Function Comment",
  "description" : "Parses and verifies the doc comments for functions. Largely copied from\nPHP_CodeSniffer\\Standards\\Squiz\\Sniffs\\Commenting\\FunctionCommentSniff."
}, {
  "patternId" : "Drupal_Commenting_GenderNeutralComment",
  "title" : "Commenting: Gender Neutral Comment",
  "description" : "Parses and verifies that comments use gender neutral language."
}, {
  "patternId" : "Drupal_Commenting_HookComment",
  "title" : "Commenting: Hook Comment",
  "description" : "Ensures hook comments on function are correct."
}, {
  "patternId" : "Drupal_Commenting_InlineComment",
  "title" : "Commenting: Inline Comment"
}, {
  "patternId" : "Drupal_Commenting_PostStatementComment",
  "title" : "Commenting: Post Statement Comment",
  "description" : "Largely copied from\n\\PHP_CodeSniffer\\Standards\\Squiz\\Sniffs\\Commenting\\PostStatementCommentSniff\nbut we want the fixer to move the comment to the previous line."
}, {
  "patternId" : "Drupal_Commenting_VariableComment",
  "title" : "Commenting: Variable Comment",
  "description" : "Parses and verifies class property doc comments."
}, {
  "patternId" : "Drupal_ControlStructures_ControlSignature",
  "title" : "Control Structures: Control Signature",
  "description" : "Verifies that control statements conform to their coding standards."
}, {
  "patternId" : "Drupal_ControlStructures_ElseIf",
  "title" : "Control Structures: Else If",
  "description" : "Checks that \"elseif\" is used instead of \"else if\"."
}, {
  "patternId" : "Drupal_ControlStructures_InlineControlStructure",
  "title" : "Control Structures: Inline Control Structure"
}, {
  "patternId" : "Drupal_Files_EndFileNewline",
  "title" : "Files: End File Newline",
  "description" : "Ensures the file ends with a newline character."
}, {
  "patternId" : "Drupal_Files_FileEncoding",
  "title" : "Files: File Encoding"
}, {
  "patternId" : "Drupal_Files_LineLength",
  "title" : "Files: Line Length",
  "description" : "Checks comment lines in the file, and throws warnings if they are over 80\ncharacters in length."
}, {
  "patternId" : "Drupal_Files_TxtFileLineLength",
  "title" : "Files: Txt File Line Length"
}, {
  "patternId" : "Drupal_Formatting_MultiLineAssignment",
  "title" : "Formatting: Multi Line Assignment"
}, {
  "patternId" : "Drupal_Formatting_MultipleStatementAlignment",
  "title" : "Formatting: Multiple Statement Alignment",
  "description" : "Checks alignment of multiple assignments.Largely copied from\n\\PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Formatting\\MultipleStatementAlignmentSniff\nbut also allows multiple single space assignments."
}, {
  "patternId" : "Drupal_Formatting_SpaceInlineIf",
  "title" : "Formatting: Space Inline If",
  "description" : "Checks that there is no space between \"?\" and \":\" inline if/else statements."
}, {
  "patternId" : "Drupal_Formatting_SpaceUnaryOperator",
  "title" : "Formatting: Space Unary Operator",
  "description" : "\\PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\Formatting\\SpaceUnaryOperatorSniff."
}, {
  "patternId" : "Drupal_Functions_DiscouragedFunctions",
  "title" : "Functions: Discouraged Functions",
  "description" : "Discourage the use of debug functions."
}, {
  "patternId" : "Drupal_Functions_FunctionDeclaration",
  "title" : "Functions: Function Declaration",
  "description" : "Ensure that there is only one space after the function keyword and no space\nbefore the opening parenthesis."
}, {
  "patternId" : "Drupal_InfoFiles_AutoAddedKeys",
  "title" : "Info Files: Auto Added Keys",
  "description" : "\"version\", \"project\" and \"timestamp\" are added automatically by drupal.org\npackaging scripts."
}, {
  "patternId" : "Drupal_InfoFiles_ClassFiles",
  "title" : "Info Files: Class Files",
  "description" : "Checks files[] entries in info files. Only files containing classes/interfaces\nshould be listed."
}, {
  "patternId" : "Drupal_InfoFiles_DuplicateEntry",
  "title" : "Info Files: Duplicate Entry",
  "description" : "Make sure that entries in info files are specified only once."
}, {
  "patternId" : "Drupal_InfoFiles_Required",
  "title" : "Info Files: Required",
  "description" : "\"name\", \"description\" and \"core are required fields in Drupal info files. Also\nchecks the \"php\" minimum requirement for Drupal 7."
}, {
  "patternId" : "Drupal_Methods_MethodDeclaration",
  "title" : "Methods: Method Declaration",
  "description" : "Checks that the method declaration is correct."
}, {
  "patternId" : "Drupal_NamingConventions_ValidClassName",
  "title" : "Naming Conventions: Valid Class Name"
}, {
  "patternId" : "Drupal_NamingConventions_ValidFunctionName",
  "title" : "Naming Conventions: Valid Function Name"
}, {
  "patternId" : "Drupal_NamingConventions_ValidGlobal",
  "title" : "Naming Conventions: Valid Global",
  "description" : "Ensures that global variables start with an underscore."
}, {
  "patternId" : "Drupal_NamingConventions_ValidVariableName",
  "title" : "Naming Conventions: Valid Variable Name"
}, {
  "patternId" : "Drupal_Scope_MethodScope",
  "title" : "Scope: Method Scope",
  "description" : "Verifies that class/interface/trait methods have scope modifiers."
}, {
  "patternId" : "Drupal_Semantics_ConstantName",
  "title" : "Semantics: Constant Name",
  "description" : "Checks that constants introduced with define() in module or install files start\nwith the module's name."
}, {
  "patternId" : "Drupal_Semantics_EmptyInstall",
  "title" : "Semantics: Empty Install",
  "description" : "Throws an error if hook_install() or hook_uninstall() definitions are empty."
}, {
  "patternId" : "Drupal_Semantics_FunctionAlias",
  "title" : "Semantics: Function Alias",
  "description" : "Checks that no PHP function name aliases are used."
}, {
  "patternId" : "Drupal_Semantics_FunctionT",
  "title" : "Semantics: Function T",
  "description" : "Check the usage of the t() function to not escape translateable strings with back\nslashes. Also checks that the first argument does not use string concatenation."
}, {
  "patternId" : "Drupal_Semantics_FunctionTriggerError",
  "title" : "Semantics: Function Trigger Error",
  "description" : "Checks that the trigger_error deprecation text message adheres to standards."
}, {
  "patternId" : "Drupal_Semantics_FunctionWatchdog",
  "title" : "Semantics: Function Watchdog",
  "description" : "Checks that the second argument to watchdog() is not enclosed with t()."
}, {
  "patternId" : "Drupal_Semantics_InstallHooks",
  "title" : "Semantics: Install Hooks",
  "description" : "Checks that hook_disable(), hook_enable(), hook_install(), hook_uninstall(),\nhook_requirements() and hook_schema() are not defined in the module file."
}, {
  "patternId" : "Drupal_Semantics_LStringTranslatable",
  "title" : "Semantics: L String Translatable",
  "description" : "Checks that string literals passed to l() are translatable."
}, {
  "patternId" : "Drupal_Semantics_PregSecurity",
  "title" : "Semantics: Preg Security",
  "description" : "Check the usage of the preg functions to ensure the insecure /e flag isn't\nused: https://www.drupal.org/node/750148"
}, {
  "patternId" : "Drupal_Semantics_RemoteAddress",
  "title" : "Semantics: Remote Address",
  "description" : "Make sure that ip_address() or Drupal::request()->getClientIp() is used instead of\n$_SERVER['REMOTE_ADDR']."
}, {
  "patternId" : "Drupal_Semantics_TInHookMenu",
  "title" : "Semantics: T In Hook Menu",
  "description" : "Checks that t() is not used in hook_menu()."
}, {
  "patternId" : "Drupal_Semantics_TInHookSchema",
  "title" : "Semantics: T In Hook Schema",
  "description" : "Checks that t() is not used in hook_schema()."
}, {
  "patternId" : "Drupal_Strings_UnnecessaryStringConcat",
  "title" : "Strings: Unnecessary String Concat",
  "description" : "Checks that two strings are not concatenated together; suggests using one string instead."
}, {
  "patternId" : "Drupal_WhiteSpace_CloseBracketSpacing",
  "title" : "White Space: Close Bracket Spacing",
  "description" : "Checks that there is no white space before a closing bracket, for \")\" and \"}\"."
}, {
  "patternId" : "Drupal_WhiteSpace_Comma",
  "title" : "White Space: Comma"
}, {
  "patternId" : "Drupal_WhiteSpace_EmptyLines",
  "title" : "White Space: Empty Lines"
}, {
  "patternId" : "Drupal_WhiteSpace_Namespace",
  "title" : "White Space: Namespace",
  "description" : "Checks that there is exactly one space after the namespace keyword."
}, {
  "patternId" : "Drupal_WhiteSpace_ObjectOperatorIndent",
  "title" : "White Space: Object Operator Indent"
}, {
  "patternId" : "Drupal_WhiteSpace_ObjectOperatorSpacing",
  "title" : "White Space: Object Operator Spacing",
  "description" : "Ensure that there are no white spaces before and after the object operator."
}, {
  "patternId" : "Drupal_WhiteSpace_OpenBracketSpacing",
  "title" : "White Space: Open Bracket Spacing",
  "description" : "Checks that there is no white space after an opening bracket, for \"(\" and \"{\"."
}, {
  "patternId" : "Drupal_WhiteSpace_OpenTagNewline",
  "title" : "White Space: Open Tag Newline",
  "description" : "Checks that there is exactly one newline after the PHP open tag."
}, {
  "patternId" : "Drupal_WhiteSpace_ScopeClosingBrace",
  "title" : "White Space: Scope Closing Brace",
  "description" : "Copied from \\PHP_CodeSniffer\\Standards\\PEAR\\Sniffs\\WhiteSpace\\ScopeClosingBraceSniff to allow empty methods\nand classes."
}, {
  "patternId" : "Drupal_WhiteSpace_ScopeIndent",
  "title" : "White Space: Scope Indent",
  "description" : "Largely copied from\n\\PHP_CodeSniffer\\Standards\\Generic\\Sniffs\\WhiteSpace\\ScopeIndentSniff,\nmodified to make the exact mode working with comments and multi line\nstatements."
}, {
  "patternId" : "Generic_Arrays_ArrayIndent",
  "title" : "Arrays: Array Indent"
}, {
  "patternId" : "Generic_Arrays_DisallowLongArraySyntax",
  "title" : "Short Array Syntax",
  "description" : "Short array syntax must be used to define arrays."
}, {
  "patternId" : "Generic_Arrays_DisallowShortArraySyntax",
  "title" : "Long Array Syntax",
  "description" : "Long array syntax must be used to define arrays."
}, {
  "patternId" : "Generic_Classes_DuplicateClassName",
  "title" : "Duplicate Class Names",
  "description" : "Class and Interface names should be unique in a project.  They should never be duplicated."
}, {
  "patternId" : "Generic_Classes_OpeningBraceSameLine",
  "title" : "Opening Brace on Same Line",
  "description" : "The opening brace of a class must be on the same line after the definition and must be the last thing on that line."
}, {
  "patternId" : "Generic_CodeAnalysis_AssignmentInCondition",
  "title" : "Assignment In Condition",
  "description" : "Variable assignments should not be made within conditions."
}, {
  "patternId" : "Generic_CodeAnalysis_EmptyPHPStatement",
  "title" : "Code Analysis: Empty PHP Statement"
}, {
  "patternId" : "Generic_CodeAnalysis_EmptyStatement",
  "title" : "Empty Statements",
  "description" : "Control Structures must have at least one statement inside of the body."
}, {
  "patternId" : "Generic_CodeAnalysis_ForLoopShouldBeWhileLoop",
  "title" : "Condition-Only For Loops",
  "description" : "For loops that have only a second expression (the condition) should be converted to while loops."
}, {
  "patternId" : "Generic_CodeAnalysis_ForLoopWithTestFunctionCall",
  "title" : "For Loops With Function Calls in the Test",
  "description" : "For loops should not call functions inside the test for the loop when they can be computed beforehand."
}, {
  "patternId" : "Generic_CodeAnalysis_JumbledIncrementer",
  "title" : "Jumbled Incrementers",
  "description" : "Incrementers in nested loops should use different variable names."
}, {
  "patternId" : "Generic_CodeAnalysis_UnconditionalIfStatement",
  "title" : "Unconditional If Statements",
  "description" : "If statements that are always evaluated should not be used."
}, {
  "patternId" : "Generic_CodeAnalysis_UnnecessaryFinalModifier",
  "title" : "Unnecessary Final Modifiers",
  "description" : "Methods should not be declared final inside of classes that are declared final."
}, {
  "patternId" : "Generic_CodeAnalysis_UnusedFunctionParameter",
  "title" : "Unused function parameters",
  "description" : "All parameters in a functions signature should be used within the function."
}, {
  "patternId" : "Generic_CodeAnalysis_UselessOverridingMethod",
  "title" : "Useless Overriding Methods",
  "description" : "Methods should not be defined that only call the parent method."
}, {
  "patternId" : "Generic_Commenting_DocComment",
  "title" : "Commenting: Doc Comment"
}, {
  "patternId" : "Generic_Commenting_Fixme",
  "title" : "Fixme Comments",
  "description" : "FIXME Statements should be taken care of."
}, {
  "patternId" : "Generic_Commenting_Todo",
  "title" : "Todo Comments",
  "description" : "TODO Statements should be taken care of."
}, {
  "patternId" : "Generic_ControlStructures_DisallowYodaConditions",
  "title" : "Disallow Yoda conditions",
  "description" : "Yoda conditions are disallowed."
}, {
  "patternId" : "Generic_ControlStructures_InlineControlStructure",
  "title" : "Inline Control Structures",
  "description" : "Control Structures should use braces."
}, {
  "patternId" : "Generic_Debug_CSSLint",
  "title" : "CSSLint",
  "description" : "All css files should pass the basic csslint tests."
}, {
  "patternId" : "Generic_Debug_ClosureLinter",
  "title" : "Closure Linter",
  "description" : "All javascript files should pass basic Closure Linter tests."
}, {
  "patternId" : "Generic_Debug_ESLint",
  "title" : "Debug: ES Lint"
}, {
  "patternId" : "Generic_Debug_JSHint",
  "title" : "JSHint",
  "description" : "All javascript files should pass basic JSHint tests."
}, {
  "patternId" : "Generic_Files_ByteOrderMark",
  "title" : "Byte Order Marks",
  "description" : "Byte Order Marks that may corrupt your application should not be used.  These include 0xefbbbf (UTF-8), 0xfeff (UTF-16 BE) and 0xfffe (UTF-16 LE)."
}, {
  "patternId" : "Generic_Files_EndFileNewline",
  "title" : "End of File Newline",
  "description" : "Files should end with a newline character."
}, {
  "patternId" : "Generic_Files_EndFileNoNewline",
  "title" : "No End of File Newline",
  "description" : "Files should not end with a newline character."
}, {
  "patternId" : "Generic_Files_ExecutableFile",
  "title" : "Executable Files",
  "description" : "Files should not be executable."
}, {
  "patternId" : "Generic_Files_InlineHTML",
  "title" : "Inline HTML",
  "description" : "Files that contain php code should only have php code and should not have any \"inline html\"."
}, {
  "patternId" : "Generic_Files_LineEndings",
  "title" : "Line Endings",
  "description" : "Unix-style line endings are preferred (\"\\n\" instead of \"\\r\\n\")."
}, {
  "patternId" : "Generic_Files_LineLength",
  "title" : "Line Length",
  "description" : "It is recommended to keep lines at approximately 80 characters long for better code readability."
}, {
  "patternId" : "Generic_Files_LowercasedFilename",
  "title" : "Lowercased Filenames",
  "description" : "Lowercase filenames are required."
}, {
  "patternId" : "Generic_Files_OneClassPerFile",
  "title" : "One Class Per File",
  "description" : "There should only be one class defined in a file."
}, {
  "patternId" : "Generic_Files_OneInterfacePerFile",
  "title" : "One Interface Per File",
  "description" : "There should only be one interface defined in a file."
}, {
  "patternId" : "Generic_Files_OneObjectStructurePerFile",
  "title" : "One Object Structure Per File",
  "description" : "There should only be one class or interface or trait defined in a file."
}, {
  "patternId" : "Generic_Files_OneTraitPerFile",
  "title" : "One Trait Per File",
  "description" : "There should only be one trait defined in a file."
}, {
  "patternId" : "Generic_Formatting_DisallowMultipleStatements",
  "title" : "Multiple Statements On a Single Line",
  "description" : "Multiple statements are not allowed on a single line."
}, {
  "patternId" : "Generic_Formatting_MultipleStatementAlignment",
  "title" : "Aligning Blocks of Assignments",
  "description" : "There should be one space on either side of an equals sign used to assign a value to a variable. In the case of a block of related assignments, more space may be inserted to promote readability."
}, {
  "patternId" : "Generic_Formatting_NoSpaceAfterCast",
  "title" : "Space After Casts",
  "description" : "Spaces are not allowed after casting operators."
}, {
  "patternId" : "Generic_Formatting_SpaceAfterCast",
  "title" : "Space After Casts",
  "description" : "Exactly one space is allowed after a cast."
}, {
  "patternId" : "Generic_Formatting_SpaceAfterNot",
  "title" : "Space After NOT operator",
  "description" : "Exactly one space is allowed after the NOT operator."
}, {
  "patternId" : "Generic_Formatting_SpaceBeforeCast",
  "title" : "Formatting: Space Before Cast"
}, {
  "patternId" : "Generic_Functions_CallTimePassByReference",
  "title" : "Call-Time Pass-By-Reference",
  "description" : "Call-time pass-by-reference is not allowed. It should be declared in the function definition."
}, {
  "patternId" : "Generic_Functions_FunctionCallArgumentSpacing",
  "title" : "Function Argument Spacing",
  "description" : "Function arguments should have one space after a comma, and single spaces surrounding the equals sign for default values."
}, {
  "patternId" : "Generic_Functions_OpeningFunctionBraceBsdAllman",
  "title" : "Opening Brace in Function Declarations",
  "description" : "Function declarations follow the \"BSD/Allman style\". The function brace is on the line following the function declaration and is indented to the same column as the start of the function declaration."
}, {
  "patternId" : "Generic_Functions_OpeningFunctionBraceKernighanRitchie",
  "title" : "Opening Brace in Function Declarations",
  "description" : "Function declarations follow the \"Kernighan/Ritchie style\". The function brace is on the same line as the function declaration. One space is required between the closing parenthesis and the brace."
}, {
  "patternId" : "Generic_Metrics_CyclomaticComplexity",
  "title" : "Cyclomatic Complexity",
  "description" : "Functions should not have a cyclomatic complexity greater than 20, and should try to stay below a complexity of 10."
}, {
  "patternId" : "Generic_Metrics_NestingLevel",
  "title" : "Nesting Level",
  "description" : "Functions should not have a nesting level greater than 10, and should try to stay below 5."
}, {
  "patternId" : "Generic_NamingConventions_CamelCapsFunctionName",
  "title" : "camelCaps Function Names",
  "description" : "Functions should use camelCaps format for their names. Only PHP's magic methods should use a double underscore prefix."
}, {
  "patternId" : "Generic_NamingConventions_ConstructorName",
  "title" : "Constructor name",
  "description" : "Constructors should be named __construct, not after the class."
}, {
  "patternId" : "Generic_NamingConventions_UpperCaseConstantName",
  "title" : "Constant Names",
  "description" : "Constants should always be all-uppercase, with underscores to separate words."
}, {
  "patternId" : "Generic_PHP_BacktickOperator",
  "title" : "Backtick Operator",
  "description" : "Disallow the use of the backtick operator for execution of shell commands."
}, {
  "patternId" : "Generic_PHP_CharacterBeforePHPOpeningTag",
  "title" : "Opening Tag at Start of File",
  "description" : "The opening php tag should be the first item in the file."
}, {
  "patternId" : "Generic_PHP_ClosingPHPTag",
  "title" : "Closing PHP Tags",
  "description" : "All opening php tags should have a corresponding closing tag."
}, {
  "patternId" : "Generic_PHP_DeprecatedFunctions",
  "title" : "Deprecated Functions",
  "description" : "Deprecated functions should not be used."
}, {
  "patternId" : "Generic_PHP_DisallowAlternativePHPTags",
  "title" : "Alternative PHP Code Tags",
  "description" : "Always use <?php ?> to delimit PHP code, do not use the ASP <% %> style tags nor the <script language=\"php\"></script> tags. This is the most portable way to include PHP code on differing operating systems and setups."
}, {
  "patternId" : "Generic_PHP_DisallowRequestSuperglobal",
  "title" : "$_REQUEST Superglobal",
  "description" : "$_REQUEST should never be used due to the ambiguity created as to where the data is coming from. Use $_POST, $_GET, or $_COOKIE instead."
}, {
  "patternId" : "Generic_PHP_DisallowShortOpenTag",
  "title" : "PHP Code Tags",
  "description" : "Always use <?php ?> to delimit PHP code, not the <? ?> shorthand. This is the most portable way to include PHP code on differing operating systems and setups."
}, {
  "patternId" : "Generic_PHP_DiscourageGoto",
  "title" : "Goto",
  "description" : "Discourage the use of the PHP `goto` language construct."
}, {
  "patternId" : "Generic_PHP_ForbiddenFunctions",
  "title" : "Forbidden Functions",
  "description" : "The forbidden functions sizeof() and delete() should not be used."
}, {
  "patternId" : "Generic_PHP_LowerCaseConstant",
  "title" : "Lowercase PHP Constants",
  "description" : "The <em>true</em>, <em>false</em> and <em>null</em> constants must always be lowercase."
}, {
  "patternId" : "Generic_PHP_LowerCaseKeyword",
  "title" : "Lowercase Keywords",
  "description" : "All PHP keywords should be lowercase."
}, {
  "patternId" : "Generic_PHP_LowerCaseType",
  "title" : "Lowercase PHP Types",
  "description" : "All PHP types used for parameter type and return type declarations should be lowercase."
}, {
  "patternId" : "Generic_PHP_NoSilencedErrors",
  "title" : "Silenced Errors",
  "description" : "Suppressing Errors is not allowed."
}, {
  "patternId" : "Generic_PHP_RequireStrictTypes",
  "title" : "PHP: Require Strict Types"
}, {
  "patternId" : "Generic_PHP_SAPIUsage",
  "title" : "SAPI Usage",
  "description" : "The PHP_SAPI constant should be used instead of php_sapi_name()."
}, {
  "patternId" : "Generic_PHP_Syntax",
  "title" : "PHP: Syntax"
}, {
  "patternId" : "Generic_PHP_UpperCaseConstant",
  "title" : "Uppercase PHP Constants",
  "description" : "The <em>true</em>, <em>false</em> and <em>null</em> constants must always be uppercase."
}, {
  "patternId" : "Generic_Strings_UnnecessaryStringConcat",
  "title" : "Unnecessary String Concatenation",
  "description" : "Strings should not be concatenated together."
}, {
  "patternId" : "Generic_VersionControl_GitMergeConflict",
  "title" : "Version Control: Git Merge Conflict"
}, {
  "patternId" : "Generic_VersionControl_SubversionProperties",
  "title" : "Subversion Properties",
  "description" : "All php files in a subversion repository should have the svn:keywords property set to 'Author Id Revision' and the svn:eol-style property set to 'native'."
}, {
  "patternId" : "Generic_WhiteSpace_ArbitraryParenthesesSpacing",
  "title" : "Arbitrary Parentheses Spacing",
  "description" : "Arbitrary sets of parentheses should have no spaces inside."
}, {
  "patternId" : "Generic_WhiteSpace_DisallowSpaceIndent",
  "title" : "No Space Indentation",
  "description" : "Tabs should be used for indentation instead of spaces."
}, {
  "patternId" : "Generic_WhiteSpace_DisallowTabIndent",
  "title" : "No Tab Indentation",
  "description" : "Spaces should be used for indentation instead of tabs."
}, {
  "patternId" : "Generic_WhiteSpace_IncrementDecrementSpacing",
  "title" : "White Space: Increment Decrement Spacing"
}, {
  "patternId" : "Generic_WhiteSpace_LanguageConstructSpacing",
  "title" : "White Space: Language Construct Spacing"
}, {
  "patternId" : "Generic_WhiteSpace_ScopeIndent",
  "title" : "Scope Indentation",
  "description" : "Indentation for control structures, classes, and functions should be 4 spaces per level."
}, {
  "patternId" : "Generic_WhiteSpace_SpreadOperatorSpacingAfter",
  "title" : "Spacing After Spread Operator",
  "description" : "There should be no space between the spread operator and the variable/function call it applies to."
}, {
  "patternId" : "MEQP1_Classes_Mysql4",
  "title" : "Classes: Mysql4",
  "description" : "Class Mysql4Sniff\nDetects usage of deprecated 'Mysql4' suffix in class names."
}, {
  "patternId" : "MEQP1_Classes_ObjectInstantiation",
  "title" : "Classes: Object Instantiation",
  "description" : "Class ObjectInstantiationSniff\nDetects direct object instantiation via 'new' keyword."
}, {
  "patternId" : "MEQP1_Classes_ResourceModel",
  "title" : "Classes: Resource Model",
  "description" : "Class ResourceModelSniff\nDetects data access code outside of ResourceModel."
}, {
  "patternId" : "MEQP1_CodeAnalysis_EmptyBlock",
  "title" : "Code Analysis: Empty Block",
  "description" : "Class EmptyBlockSniff\nDetects possible empty blocks."
}, {
  "patternId" : "MEQP1_Exceptions_DirectThrow",
  "title" : "Exceptions: Direct Throw",
  "description" : "Class DirectThrowSniff\nDetects possible direct throws of Exceptions."
}, {
  "patternId" : "MEQP1_Exceptions_Namespace",
  "title" : "Exceptions: Namespace",
  "description" : "Class NamespaceSniff\nDetects possible usage of exceptions without namespace declaration."
}, {
  "patternId" : "MEQP1_PHP_Goto",
  "title" : "PHP: Goto",
  "description" : "Class GotoSniff\nDetects use of GOTO."
}, {
  "patternId" : "MEQP1_PHP_PrivateClassMember",
  "title" : "PHP: Private Class Member",
  "description" : "Class PrivateClassMemberSniff\nDetects possible usage of 'private' scope modifiers."
}, {
  "patternId" : "MEQP1_PHP_Syntax",
  "title" : "PHP: Syntax",
  "description" : "Class SyntaxSniff\nEnsures PHP believes the syntax is clean."
}, {
  "patternId" : "MEQP1_PHP_Var",
  "title" : "PHP: Var",
  "description" : "Class VarSniff\nDetects possible usage of 'var' language construction."
}, {
  "patternId" : "MEQP1_Performance_CollectionCount",
  "title" : "Performance: Collection Count",
  "description" : "Class CollectionCountSniff\nDetects possible usage of collection count() method."
}, {
  "patternId" : "MEQP1_Performance_EmptyCheck",
  "title" : "Performance: Empty Check",
  "description" : "Class EmptyCheckSniff\nAllows easily detect wrong approach for checking empty variables in conditions."
}, {
  "patternId" : "MEQP1_Performance_InefficientMethods",
  "title" : "Performance: Inefficient Methods",
  "description" : "Class InefficientMethodsSniff\nDetects use of inefficient methods."
}, {
  "patternId" : "MEQP1_Performance_Loop",
  "title" : "Performance: Loop",
  "description" : "Class LoopSniff\nDetects possible data load in the loop."
}, {
  "patternId" : "MEQP1_SQL_MissedIndexes",
  "title" : "SQL: Missed Indexes",
  "description" : "Class MissedIndexesSniff\nDetects possible missed indexes in install and update schema classes."
}, {
  "patternId" : "MEQP1_SQL_RawQuery",
  "title" : "SQL: Raw Query",
  "description" : "Class RawQuerySniff\nDetects possible raw SQL queries."
}, {
  "patternId" : "MEQP1_SQL_SlowQuery",
  "title" : "SQL: Slow Query",
  "description" : "Class SlowQuerySniff\nDetects possible slow SQL queries."
}, {
  "patternId" : "MEQP1_Security_Acl",
  "title" : "Security: Acl",
  "description" : "Class AclSniff\nDetects possible improper usage of adminhtml actions."
}, {
  "patternId" : "MEQP1_Security_DiscouragedFunction",
  "title" : "Security: Discouraged Function",
  "description" : "Class DiscouragedFunctionSniff\nDetects possible usage of discouraged functions."
}, {
  "patternId" : "MEQP1_Security_IncludeFile",
  "title" : "Security: Include File",
  "description" : "Class IncludeFileSniff\nDetects possible improper usage of include functions."
}, {
  "patternId" : "MEQP1_Security_InsecureFunction",
  "title" : "Security: Insecure Function",
  "description" : "Detects the use of insecure functions."
}, {
  "patternId" : "MEQP1_Security_LanguageConstruct",
  "title" : "Security: Language Construct",
  "description" : "Class LanguageConstructSniff\nDetects possible usage of discouraged language constructs."
}, {
  "patternId" : "MEQP1_Security_Superglobal",
  "title" : "Security: Superglobal",
  "description" : "Class SuperglobalSniff\nDetects usage of super global variables."
}, {
  "patternId" : "MEQP1_Stdlib_DateTime",
  "title" : "Stdlib: Date Time",
  "description" : "Class DateTimeSniff\nDetects overcomplicated Date/Time handling."
}, {
  "patternId" : "MEQP1_Strings_RegEx",
  "title" : "Strings: Reg Ex",
  "description" : "Class RegExSniff\nDetects executable regular expressions."
}, {
  "patternId" : "MEQP1_Strings_StringConcat",
  "title" : "Strings: String Concat",
  "description" : "Class StringConcatSniff\nDetects string concatenation via '+' operator."
}, {
  "patternId" : "MEQP1_Strings_StringPosition",
  "title" : "Strings: String Position",
  "description" : "Class StringPositionSniff\nDetects misusing of IS_IDENTICAL operators."
}, {
  "patternId" : "MEQP1_Templates_XssTemplate",
  "title" : "Templates: Xss Template",
  "description" : "Class XssTemplateSniff\nDetects not escaped output in phtml templates."
}, {
  "patternId" : "Magento2_Classes_AbstractApi",
  "title" : "Classes: Abstract Api",
  "description" : "Detects api annotation for an abstract class."
}, {
  "patternId" : "Magento2_Classes_DiscouragedDependencies",
  "title" : "Classes: Discouraged Dependencies",
  "description" : "Detects explicit request of proxies and interceptors in constructors"
}, {
  "patternId" : "Magento2_CodeAnalysis_EmptyBlock",
  "title" : "Code Analysis: Empty Block",
  "description" : "Detects possible empty blocks."
}, {
  "patternId" : "Magento2_Commenting_ClassAndInterfacePHPDocFormatting",
  "title" : "Commenting: Class And Interface PHP Doc Formatting",
  "description" : "Detects PHPDoc formatting for classes and interfaces."
}, {
  "patternId" : "Magento2_Commenting_ConstantsPHPDocFormatting",
  "title" : "Commenting: Constants PHP Doc Formatting",
  "description" : "Detects PHPDoc formatting for constants."
}, {
  "patternId" : "Magento2_Exceptions_DirectThrow",
  "title" : "Exceptions: Direct Throw",
  "description" : "Detects possible direct throws of Exceptions."
}, {
  "patternId" : "Magento2_Exceptions_ThrowCatch",
  "title" : "Exceptions: Throw Catch",
  "description" : "Detects exceptions must not be handled in same function"
}, {
  "patternId" : "Magento2_Exceptions_TryProcessSystemResources",
  "title" : "Exceptions: Try Process System Resources",
  "description" : "Detects missing try-catch block when processing system resources."
}, {
  "patternId" : "Magento2_Functions_DiscouragedFunction",
  "title" : "Functions: Discouraged Function",
  "description" : "Detects possible usage of discouraged functions."
}, {
  "patternId" : "Magento2_Functions_StaticFunction",
  "title" : "Functions: Static Function",
  "description" : "Detects static function definitions."
}, {
  "patternId" : "Magento2_GraphQL_AbstractGraphQL",
  "title" : "Graph QL: Abstract Graph QL",
  "description" : "Defines an abstract base class for GraphQL sniffs."
}, {
  "patternId" : "Magento2_GraphQL_ValidArgumentName",
  "title" : "Graph QL: Valid Argument Name",
  "description" : "Detects argument names that are not specified in <kbd>cameCase</kbd>."
}, {
  "patternId" : "Magento2_GraphQL_ValidEnumValue",
  "title" : "Graph QL: Valid Enum Value",
  "description" : "Detects enum values that are not specified in <kbd>SCREAMING_SNAKE_CASE</kbd>."
}, {
  "patternId" : "Magento2_GraphQL_ValidFieldName",
  "title" : "Graph QL: Valid Field Name",
  "description" : "Detects field names the are not specified in <kbd>snake_case</kbd>."
}, {
  "patternId" : "Magento2_GraphQL_ValidTopLevelFieldName",
  "title" : "Graph QL: Valid Top Level Field Name",
  "description" : "Detects top level field names that are not specified in <kbd>cameCase</kbd>."
}, {
  "patternId" : "Magento2_GraphQL_ValidTypeName",
  "title" : "Graph QL: Valid Type Name",
  "description" : "Detects types (<kbd>type</kbd>, <kbd>interface</kbd> and <kbd>enum</kbd>) that are not specified in\n<kbd>UpperCamelCase</kbd>."
}, {
  "patternId" : "Magento2_Legacy_MageEntity",
  "title" : "Legacy: Mage Entity",
  "description" : "Detects typical Magento 1.x classes constructions."
}, {
  "patternId" : "Magento2_NamingConvention_InterfaceName",
  "title" : "Naming Convention: Interface Name",
  "description" : "Detects possible interface declaration without 'Interface' suffix."
}, {
  "patternId" : "Magento2_NamingConvention_ReservedWords",
  "title" : "Naming Convention: Reserved Words",
  "description" : "Validates that class name is not reserved word."
}, {
  "patternId" : "Magento2_PHP_FinalImplementation",
  "title" : "PHP: Final Implementation",
  "description" : "Magento is a highly extensible and customizable platform. The use of final classes and methods is prohibited."
}, {
  "patternId" : "Magento2_PHP_Goto",
  "title" : "PHP: Goto",
  "description" : "Detects use of GOTO."
}, {
  "patternId" : "Magento2_PHP_LiteralNamespaces",
  "title" : "PHP: Literal Namespaces",
  "description" : "Custom phpcs sniff to detect usages of literal class and interface names."
}, {
  "patternId" : "Magento2_PHP_ReturnValueCheck",
  "title" : "PHP: Return Value Check",
  "description" : "Detects misusing of IS_IDENTICAL operators."
}, {
  "patternId" : "Magento2_PHP_ShortEchoSyntax",
  "title" : "PHP: Short Echo Syntax",
  "description" : "Validate short echo syntax is used."
}, {
  "patternId" : "Magento2_PHP_Var",
  "title" : "PHP: Var",
  "description" : "Detects possible usage of 'var' language construction."
}, {
  "patternId" : "Magento2_Performance_ForeachArrayMerge",
  "title" : "Performance: Foreach Array Merge",
  "description" : "Detects array_merge(."
}, {
  "patternId" : "Magento2_SQL_RawQuery",
  "title" : "SQL: Raw Query",
  "description" : "Detects possible raw SQL queries."
}, {
  "patternId" : "Magento2_Security_IncludeFile",
  "title" : "Security: Include File",
  "description" : "Detects possible improper usage of include functions."
}, {
  "patternId" : "Magento2_Security_InsecureFunction",
  "title" : "Security: Insecure Function",
  "description" : "Detects the use of insecure functions."
}, {
  "patternId" : "Magento2_Security_LanguageConstruct",
  "title" : "Security: Language Construct",
  "description" : "Detects possible usage of discouraged language constructs."
}, {
  "patternId" : "Magento2_Security_Superglobal",
  "title" : "Security: Superglobal",
  "description" : "Detects possible usage of super global variables."
}, {
  "patternId" : "Magento2_Security_XssTemplate",
  "title" : "Security: Xss Template",
  "description" : "Detects not escaped output in phtml templates."
}, {
  "patternId" : "Magento2_Strings_ExecutableRegEx",
  "title" : "Strings: Executable Reg Ex",
  "description" : "Detects executable regular expressions."
}, {
  "patternId" : "Magento2_Strings_StringConcat",
  "title" : "Strings: String Concat",
  "description" : "Detects string concatenation via '+' operator."
}, {
  "patternId" : "Magento2_Templates_ThisInTemplate",
  "title" : "Templates: This In Template",
  "description" : "Detects possible usage of $this variable files."
}, {
  "patternId" : "Magento2_Translation_ConstantUsage",
  "title" : "Translation: Constant Usage",
  "description" : "Make sure that constants are not used as the first argument of translation function."
}, {
  "patternId" : "Magento2_Whitespace_MultipleEmptyLines",
  "title" : "Whitespace: Multiple Empty Lines",
  "description" : "Detects possible usage of multiple blank lines in a row."
}, {
  "patternId" : "MySource_CSS_BrowserSpecificStyles",
  "title" : "CSS: Browser Specific Styles"
}, {
  "patternId" : "MySource_Channels_DisallowSelfActions",
  "title" : "Channels: Disallow Self Actions"
}, {
  "patternId" : "MySource_Channels_IncludeOwnSystem",
  "title" : "Channels: Include Own System"
}, {
  "patternId" : "MySource_Channels_IncludeSystem",
  "title" : "Channels: Include System"
}, {
  "patternId" : "MySource_Channels_UnusedSystem",
  "title" : "Channels: Unused System"
}, {
  "patternId" : "MySource_Commenting_FunctionComment",
  "title" : "Commenting: Function Comment"
}, {
  "patternId" : "MySource_Debug_DebugCode",
  "title" : "Debug: Debug Code"
}, {
  "patternId" : "MySource_Debug_FirebugConsole",
  "title" : "Debug: Firebug Console"
}, {
  "patternId" : "MySource_Objects_AssignThis",
  "title" : "Objects: Assign This"
}, {
  "patternId" : "MySource_Objects_CreateWidgetTypeCallback",
  "title" : "Objects: Create Widget Type Callback"
}, {
  "patternId" : "MySource_Objects_DisallowNewWidget",
  "title" : "Objects: Disallow New Widget"
}, {
  "patternId" : "MySource_PHP_AjaxNullComparison",
  "title" : "PHP: Ajax Null Comparison"
}, {
  "patternId" : "MySource_PHP_EvalObjectFactory",
  "title" : "PHP: Eval Object Factory"
}, {
  "patternId" : "MySource_PHP_GetRequestData",
  "title" : "PHP: Get Request Data"
}, {
  "patternId" : "MySource_PHP_ReturnFunctionValue",
  "title" : "PHP: Return Function Value"
}, {
  "patternId" : "MySource_Strings_JoinStrings",
  "title" : "Strings: Join Strings"
}, {
  "patternId" : "PEAR_Classes_ClassDeclaration",
  "title" : "Class Declarations",
  "description" : "The opening brace of a class must be on the line after the definition by itself."
}, {
  "patternId" : "PEAR_Commenting_ClassComment",
  "title" : "Class Comments",
  "description" : "Classes and interfaces must have a non-empty doc comment.  The short description must be on the second line of the comment.  Each description must have one blank comment line before and after.  There must be one blank line before the tags in the comments.  A @version tag must be in Release: package_version format."
}, {
  "patternId" : "PEAR_Commenting_FileComment",
  "title" : "File Comments",
  "description" : "Files must have a non-empty doc comment.  The short description must be on the second line of the comment.  Each description must have one blank comment line before and after.  There must be one blank line before the tags in the comments.  There must be a category, package, author, license, and link tag.  There may only be one category, package, subpackage, license, version, since and deprecated tag.  The tags must be in the order category, package, subpackage, author, copyright, license, version, link, see, since, and deprecated.  The php version must be specified."
}, {
  "patternId" : "PEAR_Commenting_FunctionComment",
  "title" : "Function Comments",
  "description" : "Functions must have a non-empty doc comment.  The short description must be on the second line of the comment.  Each description must have one blank comment line before and after.  There must be one blank line before the tags in the comments.  There must be a tag for each of the parameters in the right order with the right variable names with a comment.  There must be a return tag.  Any throw tag must have an exception class."
}, {
  "patternId" : "PEAR_Commenting_InlineComment",
  "title" : "Inline Comments",
  "description" : "Perl-style # comments are not allowed."
}, {
  "patternId" : "PEAR_ControlStructures_ControlSignature",
  "title" : "Control Structure Signatures",
  "description" : "Control structures should use one space around the parentheses in conditions.  The opening brace should be preceded by one space and should be at the end of the line."
}, {
  "patternId" : "PEAR_ControlStructures_MultiLineCondition",
  "title" : "Multi-line If Conditions",
  "description" : "Multi-line if conditions should be indented one level and each line should begin with a boolean operator.  The end parenthesis should be on a new line."
}, {
  "patternId" : "PEAR_Files_IncludingFile",
  "title" : "Including Code",
  "description" : "Anywhere you are unconditionally including a class file, use <em>require_once</em>. Anywhere you are conditionally including a class file (for example, factory methods), use <em>include_once</em>. Either of these will ensure that class files are included only once. They share the same file list, so you don't need to worry about mixing them - a file included with <em>require_once</em> will not be included again by <em>include_once</em>."
}, {
  "patternId" : "PEAR_Formatting_MultiLineAssignment",
  "title" : "Multi-Line Assignment",
  "description" : "Multi-line assignment should have the equals sign be the first item on the second line indented correctly."
}, {
  "patternId" : "PEAR_Functions_FunctionCallSignature",
  "title" : "Function Calls",
  "description" : "Functions should be called with no spaces between the function name, the opening parenthesis, and the first parameter; and no space between the last parameter, the closing parenthesis, and the semicolon."
}, {
  "patternId" : "PEAR_Functions_FunctionDeclaration",
  "title" : "Function Declarations",
  "description" : "There should be exactly 1 space after the function keyword and 1 space on each side of the use keyword.  Closures should use the Kernighan/Ritchie Brace style and other single-line functions should use the BSD/Allman style.  Multi-line function declarations should have the parameter lists indented one level with the closing parenthesis on a newline followed by a single space and the opening brace of the function."
}, {
  "patternId" : "PEAR_Functions_ValidDefaultValue",
  "title" : "Default Values in Function Declarations",
  "description" : "Arguments with default values go at the end of the argument list."
}, {
  "patternId" : "PEAR_NamingConventions_ValidClassName",
  "title" : "Class Names",
  "description" : "Classes should be given descriptive names. Avoid using abbreviations where possible. Class names should always begin with an uppercase letter. The PEAR class hierarchy is also reflected in the class name, each level of the hierarchy separated with a single underscore."
}, {
  "patternId" : "PEAR_NamingConventions_ValidFunctionName",
  "title" : "Function and Method Names",
  "description" : "Functions and methods should be named using the \"studly caps\" style (also referred to as \"bumpy case\" or \"camel caps\"). Functions should in addition have the package name as a prefix, to avoid name collisions between packages. The initial letter of the name (after the prefix) is lowercase, and each letter that starts a new \"word\" is capitalized."
}, {
  "patternId" : "PEAR_NamingConventions_ValidVariableName",
  "title" : "Variable Names",
  "description" : "Private member variable names should be prefixed with an underscore and public/protected variable names should not."
}, {
  "patternId" : "PEAR_WhiteSpace_ObjectOperatorIndent",
  "title" : "Object Operator Indentation",
  "description" : "Chained object operators when spread out over multiple lines should be the first thing on the line and be indented by 1 level."
}, {
  "patternId" : "PEAR_WhiteSpace_ScopeClosingBrace",
  "title" : "Closing Brace Indentation",
  "description" : "Closing braces should be indented at the same level as the beginning of the scope."
}, {
  "patternId" : "PEAR_WhiteSpace_ScopeIndent",
  "title" : "Scope Indentation",
  "description" : "Any scope openers except for switch statements should be indented 1 level.  This includes classes, functions, and control structures."
}, {
  "patternId" : "PHPCompatibility_Classes_ForbiddenAbstractPrivateMethods",
  "title" : "PHP Compatibility related issue (Classes): Forbidden Abstract Private Methods",
  "description" : "Abstract private methods are not allowed since PHP 5.1."
}, {
  "patternId" : "PHPCompatibility_Classes_NewAnonymousClasses",
  "title" : "PHP Compatibility related issue (Classes): New Anonymous Classes",
  "description" : "Anonymous classes are supported since PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_Classes_NewClasses",
  "title" : "PHP Compatibility related issue (Classes): New Classes",
  "description" : "Detect use of new PHP native classes."
}, {
  "patternId" : "PHPCompatibility_Classes_NewConstVisibility",
  "title" : "PHP Compatibility related issue (Classes): New Const Visibility",
  "description" : "Visibility for class constants is available since PHP 7.1."
}, {
  "patternId" : "PHPCompatibility_Classes_NewLateStaticBinding",
  "title" : "PHP Compatibility related issue (Classes): New Late Static Binding",
  "description" : "Detect use of late static binding as introduced in PHP 5.3."
}, {
  "patternId" : "PHPCompatibility_Classes_NewTypedProperties",
  "title" : "PHP Compatibility related issue (Classes): New Typed Properties",
  "description" : "Typed class property declarations are available since PHP 7.4."
}, {
  "patternId" : "PHPCompatibility_Classes_RemovedOrphanedParent",
  "title" : "PHP Compatibility related issue (Classes): Removed Orphaned Parent",
  "description" : "Using `parent` inside a class without parent is deprecated since PHP 7.4."
}, {
  "patternId" : "PHPCompatibility_Constants_NewConstants",
  "title" : "PHP Compatibility related issue (Constants): New Constants",
  "description" : "Detect use of new PHP native global constants."
}, {
  "patternId" : "PHPCompatibility_Constants_NewMagicClassConstant",
  "title" : "PHP Compatibility related issue (Constants): New Magic Class Constant",
  "description" : "Detect usage of the magic `::class` constant introduced in PHP 5.5."
}, {
  "patternId" : "PHPCompatibility_Constants_RemovedConstants",
  "title" : "PHP Compatibility related issue (Constants): Removed Constants",
  "description" : "Detect use of deprecated and/or removed PHP native global constants."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_DiscouragedSwitchContinue",
  "title" : "PHP Compatibility related issue (Control Structures): Discouraged Switch Continue",
  "description" : "Detect use of `continue` in `switch` control structures."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_ForbiddenBreakContinueOutsideLoop",
  "title" : "PHP Compatibility related issue (Control Structures): Forbidden Break Continue Outside Loop",
  "description" : "Detect using `break` and/or `continue` statements outside of a looping structure."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_ForbiddenBreakContinueVariableArguments",
  "title" : "PHP Compatibility related issue (Control Structures): Forbidden Break Continue Variable Arguments",
  "description" : "Detects using 0 and variable numeric arguments on `break` and `continue` statements."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_ForbiddenSwitchWithMultipleDefaultBlocks",
  "title" : "PHP Compatibility related issue (Control Structures): Forbidden Switch With Multiple Default Blocks",
  "description" : "Switch statements can not have multiple default blocks since PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_NewExecutionDirectives",
  "title" : "PHP Compatibility related issue (Control Structures): New Execution Directives",
  "description" : "Check for valid execution directives set with `declare()`."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_NewForeachExpressionReferencing",
  "title" : "PHP Compatibility related issue (Control Structures): New Foreach Expression Referencing",
  "description" : "Detect `foreach` expression referencing."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_NewListInForeach",
  "title" : "PHP Compatibility related issue (Control Structures): New List In Foreach",
  "description" : "Detect unpacking nested arrays with `list()` in a `foreach()` as available since PHP 5.5."
}, {
  "patternId" : "PHPCompatibility_ControlStructures_NewMultiCatch",
  "title" : "PHP Compatibility related issue (Control Structures): New Multi Catch",
  "description" : "Catching multiple exception types in one statement is available since PHP 7.1."
}, {
  "patternId" : "PHPCompatibility_Extensions_RemovedExtensions",
  "title" : "PHP Compatibility related issue (Extensions): Removed Extensions",
  "description" : "Detect the use of deprecated and/or removed PHP extensions."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_ForbiddenParameterShadowSuperGlobals",
  "title" : "PHP Compatibility related issue (Function Declarations): Forbidden Parameter Shadow Super Globals",
  "description" : "Detect the use of superglobals as parameters for functions, support for which was removed in PHP 5.4."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_ForbiddenParametersWithSameName",
  "title" : "PHP Compatibility related issue (Function Declarations): Forbidden Parameters With Same Name",
  "description" : "Functions can not have multiple parameters with the same name since PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_ForbiddenToStringParameters",
  "title" : "PHP Compatibility related issue (Function Declarations): Forbidden To String Parameters",
  "description" : "As of PHP 5.3, the __toString() magic method can no longer accept arguments."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_ForbiddenVariableNamesInClosureUse",
  "title" : "PHP Compatibility related issue (Function Declarations): Forbidden Variable Names In Closure Use",
  "description" : "Detect variable names forbidden to be used in closure `use` statements."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_NewClosure",
  "title" : "PHP Compatibility related issue (Function Declarations): New Closure",
  "description" : "Detect closures and verify that the features used are supported."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_NewExceptionsFromToString",
  "title" : "PHP Compatibility related issue (Function Declarations): New Exceptions From To String",
  "description" : "As of PHP 7.4, throwing exceptions from a `__toString()` method is allowed."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_NewNullableTypes",
  "title" : "PHP Compatibility related issue (Function Declarations): New Nullable Types",
  "description" : "Nullable parameter type declarations and return types are available since PHP 7.1."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_NewParamTypeDeclarations",
  "title" : "PHP Compatibility related issue (Function Declarations): New Param Type Declarations",
  "description" : "Detect and verify the use of parameter type declarations in function declarations."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_NewReturnTypeDeclarations",
  "title" : "PHP Compatibility related issue (Function Declarations): New Return Type Declarations",
  "description" : "Detect and verify the use of return type declarations in function declarations."
}, {
  "patternId" : "PHPCompatibility_FunctionDeclarations_NonStaticMagicMethods",
  "title" : "PHP Compatibility related issue (Function Declarations): Non Static Magic Methods",
  "description" : "Verifies the use of the correct visibility and static properties of magic methods."
}, {
  "patternId" : "PHPCompatibility_FunctionNameRestrictions_NewMagicMethods",
  "title" : "PHP Compatibility related issue (Function Name Restrictions): New Magic Methods",
  "description" : "Warns for non-magic behaviour of magic methods prior to becoming magic."
}, {
  "patternId" : "PHPCompatibility_FunctionNameRestrictions_RemovedMagicAutoload",
  "title" : "PHP Compatibility related issue (Function Name Restrictions): Removed Magic Autoload",
  "description" : "Detect declaration of the magic `__autoload()` method."
}, {
  "patternId" : "PHPCompatibility_FunctionNameRestrictions_RemovedNamespacedAssert",
  "title" : "PHP Compatibility related issue (Function Name Restrictions): Removed Namespaced Assert",
  "description" : "Detect declaration of a namespaced function called `assert()`."
}, {
  "patternId" : "PHPCompatibility_FunctionNameRestrictions_RemovedPHP4StyleConstructors",
  "title" : "PHP Compatibility related issue (Function Name Restrictions): Removed PHP4 Style Constructors",
  "description" : "Detect declarations of PHP 4 style constructors which are deprecated as of PHP 7.0.0."
}, {
  "patternId" : "PHPCompatibility_FunctionNameRestrictions_ReservedFunctionNames",
  "title" : "PHP Compatibility related issue (Function Name Restrictions): Reserved Function Names",
  "description" : "All function and method names starting with double underscore are reserved by PHP."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_ArgumentFunctionsReportCurrentValue",
  "title" : "PHP Compatibility related issue (Function Use): Argument Functions Report Current Value",
  "description" : "Functions inspecting function arguments report the current parameter value\ninstead of the original since PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_ArgumentFunctionsUsage",
  "title" : "PHP Compatibility related issue (Function Use): Argument Functions Usage",
  "description" : "Detect usage of `func_get_args()`, `func_get_arg()` and `func_num_args()` in invalid context."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_NewFunctionParameters",
  "title" : "PHP Compatibility related issue (Function Use): New Function Parameters",
  "description" : "Detect use of new function parameters in calls to native PHP functions."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_NewFunctions",
  "title" : "PHP Compatibility related issue (Function Use): New Functions",
  "description" : "Detect calls to new native PHP functions."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_OptionalToRequiredFunctionParameters",
  "title" : "PHP Compatibility related issue (Function Use): Optional To Required Function Parameters",
  "description" : "Detect missing required function parameters in calls to native PHP functions."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_RemovedFunctionParameters",
  "title" : "PHP Compatibility related issue (Function Use): Removed Function Parameters",
  "description" : "Detect use of deprecated/removed function parameters in calls to native PHP functions."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_RemovedFunctions",
  "title" : "PHP Compatibility related issue (Function Use): Removed Functions",
  "description" : "Detect calls to deprecated/removed native PHP functions."
}, {
  "patternId" : "PHPCompatibility_FunctionUse_RequiredToOptionalFunctionParameters",
  "title" : "PHP Compatibility related issue (Function Use): Required To Optional Function Parameters",
  "description" : "Detect missing required function parameters in calls to native PHP functions."
}, {
  "patternId" : "PHPCompatibility_Generators_NewGeneratorReturn",
  "title" : "PHP Compatibility related issue (Generators): New Generator Return",
  "description" : "As of PHP 7.0, a `return` statement can be used within a generator for a final expression to be returned."
}, {
  "patternId" : "PHPCompatibility_IniDirectives_NewIniDirectives",
  "title" : "PHP Compatibility related issue (Ini Directives): New Ini Directives",
  "description" : "Detect the use of new INI directives through `ini_set()` or `ini_get()`."
}, {
  "patternId" : "PHPCompatibility_IniDirectives_RemovedIniDirectives",
  "title" : "PHP Compatibility related issue (Ini Directives): Removed Ini Directives",
  "description" : "Detect the use of deprecated and removed INI directives through `ini_set()` or `ini_get()`."
}, {
  "patternId" : "PHPCompatibility_InitialValue_NewConstantArraysUsingConst",
  "title" : "PHP Compatibility related issue (Initial Value): New Constant Arrays Using Const",
  "description" : "Detect declaration of constants using the `const` keyword with a (constant) array value\nas supported since PHP 5.6."
}, {
  "patternId" : "PHPCompatibility_InitialValue_NewConstantArraysUsingDefine",
  "title" : "PHP Compatibility related issue (Initial Value): New Constant Arrays Using Define",
  "description" : "Detect declaration of constants using `define()` with a (constant) array value\nas supported since PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_InitialValue_NewConstantScalarExpressions",
  "title" : "PHP Compatibility related issue (Initial Value): New Constant Scalar Expressions",
  "description" : "Detect constant scalar expressions being used to set an initial value."
}, {
  "patternId" : "PHPCompatibility_InitialValue_NewHeredoc",
  "title" : "PHP Compatibility related issue (Initial Value): New Heredoc",
  "description" : "Detect a heredoc being used to set an initial value."
}, {
  "patternId" : "PHPCompatibility_Interfaces_InternalInterfaces",
  "title" : "PHP Compatibility related issue (Interfaces): Internal Interfaces",
  "description" : "Detect classes which implement PHP native interfaces intended only for PHP internal use."
}, {
  "patternId" : "PHPCompatibility_Interfaces_NewInterfaces",
  "title" : "PHP Compatibility related issue (Interfaces): New Interfaces",
  "description" : "Detect use of new PHP native interfaces and unsupported interface methods."
}, {
  "patternId" : "PHPCompatibility_Keywords_CaseSensitiveKeywords",
  "title" : "PHP Compatibility related issue (Keywords): Case Sensitive Keywords",
  "description" : "Detect usage of `self`, `parent` and `static` and verify they are lowercase."
}, {
  "patternId" : "PHPCompatibility_Keywords_ForbiddenNames",
  "title" : "PHP Compatibility related issue (Keywords): Forbidden Names",
  "description" : "Detects the use of reserved keywords as class, function, namespace or constant names."
}, {
  "patternId" : "PHPCompatibility_Keywords_ForbiddenNamesAsDeclared",
  "title" : "PHP Compatibility related issue (Keywords): Forbidden Names As Declared",
  "description" : "Detects the use of some reserved keywords to name a class, interface, trait or namespace."
}, {
  "patternId" : "PHPCompatibility_Keywords_ForbiddenNamesAsInvokedFunctions",
  "title" : "PHP Compatibility related issue (Keywords): Forbidden Names As Invoked Functions",
  "description" : "Prohibits the use of reserved keywords invoked as functions."
}, {
  "patternId" : "PHPCompatibility_Keywords_NewKeywords",
  "title" : "PHP Compatibility related issue (Keywords): New Keywords",
  "description" : "Detect use of new PHP keywords."
}, {
  "patternId" : "PHPCompatibility_LanguageConstructs_NewEmptyNonVariable",
  "title" : "PHP Compatibility related issue (Language Constructs): New Empty Non Variable",
  "description" : "Verify that nothing but variables are passed to empty()."
}, {
  "patternId" : "PHPCompatibility_LanguageConstructs_NewLanguageConstructs",
  "title" : "PHP Compatibility related issue (Language Constructs): New Language Constructs",
  "description" : "Detect use of new PHP language constructs."
}, {
  "patternId" : "PHPCompatibility_Lists_AssignmentOrder",
  "title" : "PHP Compatibility related issue (Lists): Assignment Order",
  "description" : "Detect code affected by the changed list assignment order in PHP 7.0+."
}, {
  "patternId" : "PHPCompatibility_Lists_ForbiddenEmptyListAssignment",
  "title" : "PHP Compatibility related issue (Lists): Forbidden Empty List Assignment",
  "description" : "Support for empty `list()` expressions has been removed in PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_Lists_NewKeyedList",
  "title" : "PHP Compatibility related issue (Lists): New Keyed List",
  "description" : "Since PHP 7.1, you can specify keys in `list()`, or its new shorthand `[]` syntax."
}, {
  "patternId" : "PHPCompatibility_Lists_NewListReferenceAssignment",
  "title" : "PHP Compatibility related issue (Lists): New List Reference Assignment",
  "description" : "Detect reference assignments in array destructuring using (short) list."
}, {
  "patternId" : "PHPCompatibility_Lists_NewShortList",
  "title" : "PHP Compatibility related issue (Lists): New Short List",
  "description" : "Detect short list syntax for symmetric array destructuring."
}, {
  "patternId" : "PHPCompatibility_MethodUse_ForbiddenToStringParameters",
  "title" : "PHP Compatibility related issue (Method Use): Forbidden To String Parameters",
  "description" : "As of PHP 5.3, the `__toString()` magic method can no longer be passed arguments."
}, {
  "patternId" : "PHPCompatibility_MethodUse_NewDirectCallsToClone",
  "title" : "PHP Compatibility related issue (Method Use): New Direct Calls To Clone",
  "description" : "Detect direct calls to the `__clone()` magic method, which is allowed since PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_Miscellaneous_NewPHPOpenTagEOF",
  "title" : "PHP Compatibility related issue (Miscellaneous): New PHP Open Tag EOF",
  "description" : "PHP 7.4 now supports stand-alone PHP tags at the end of a file (without new line)."
}, {
  "patternId" : "PHPCompatibility_Miscellaneous_RemovedAlternativePHPTags",
  "title" : "PHP Compatibility related issue (Miscellaneous): Removed Alternative PHP Tags",
  "description" : "Check for use of alternative PHP tags, support for which was removed in PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_Miscellaneous_ValidIntegers",
  "title" : "PHP Compatibility related issue (Miscellaneous): Valid Integers",
  "description" : "Check for valid integer types and values."
}, {
  "patternId" : "PHPCompatibility_Operators_ChangedConcatOperatorPrecedence",
  "title" : "PHP Compatibility related issue (Operators): Changed Concat Operator Precedence",
  "description" : "Detect code affected by the change in operator precedence of concatenation in PHP 8.0."
}, {
  "patternId" : "PHPCompatibility_Operators_ForbiddenNegativeBitshift",
  "title" : "PHP Compatibility related issue (Operators): Forbidden Negative Bitshift",
  "description" : "Bitwise shifts by negative number will throw an ArithmeticError since PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_Operators_NewOperators",
  "title" : "PHP Compatibility related issue (Operators): New Operators",
  "description" : "Detect use of new PHP operators."
}, {
  "patternId" : "PHPCompatibility_Operators_NewShortTernary",
  "title" : "PHP Compatibility related issue (Operators): New Short Ternary",
  "description" : "Detect usage of the short ternary (elvis) operator as introduced in PHP 5.3."
}, {
  "patternId" : "PHPCompatibility_Operators_RemovedTernaryAssociativity",
  "title" : "PHP Compatibility related issue (Operators): Removed Ternary Associativity",
  "description" : "The left-associativity of the ternary operator is deprecated in PHP 7.4 and\nremoved in PHP 8.0."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_ForbiddenGetClassNull",
  "title" : "PHP Compatibility related issue (Parameter Values): Forbidden Get Class Null",
  "description" : "Detect: Passing `null` to `get_class()` is no longer allowed as of PHP 7.2."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_ForbiddenStripTagsSelfClosingXHTML",
  "title" : "PHP Compatibility related issue (Parameter Values): Forbidden Strip Tags Self Closing XHTML",
  "description" : "Since PHP 5.3.4, `strip_tags()` ignores self-closing XHTML tags in allowable_tags"
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewArrayReduceInitialType",
  "title" : "PHP Compatibility related issue (Parameter Values): New Array Reduce Initial Type",
  "description" : "In PHP 5.2 and lower, the `$initial` parameter for `array_reduce()` had to be an integer."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewFopenModes",
  "title" : "PHP Compatibility related issue (Parameter Values): New Fopen Modes",
  "description" : "Check for valid values for the `fopen()` `$mode` parameter."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewHTMLEntitiesEncodingDefault",
  "title" : "PHP Compatibility related issue (Parameter Values): New HTML Entities Encoding Default",
  "description" : "As of PHP 5.4, the default character set for `htmlspecialchars()`, `htmlentities()`\nand `html_entity_decode()` is now `UTF-8`, instead of `ISO-8859-1`."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewHashAlgorithms",
  "title" : "PHP Compatibility related issue (Parameter Values): New Hash Algorithms",
  "description" : "Detect the use of newly introduced hash algorithms."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewIDNVariantDefault",
  "title" : "PHP Compatibility related issue (Parameter Values): New IDN Variant Default",
  "description" : "The default value for the `$variant` parameter has changed from `INTL_IDNA_VARIANT_2003`\nto `INTL_IDNA_VARIANT_UTS46` in PHP 7.4."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewIconvMbstringCharsetDefault",
  "title" : "PHP Compatibility related issue (Parameter Values): New Iconv Mbstring Charset Default",
  "description" : "Detect calls to Iconv and Mbstring functions with the optional `$charset`/`$encoding` parameter not set."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewNegativeStringOffset",
  "title" : "PHP Compatibility related issue (Parameter Values): New Negative String Offset",
  "description" : "Detect negative string offsets as parameters passed to functions where this\nwas not allowed prior to PHP 7.1."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewPCREModifiers",
  "title" : "PHP Compatibility related issue (Parameter Values): New PCRE Modifiers",
  "description" : "Check for the use of newly added regex modifiers for PCRE functions."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewPackFormat",
  "title" : "PHP Compatibility related issue (Parameter Values): New Pack Format",
  "description" : "Check for valid values for the `$format` passed to `pack()`."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewPasswordAlgoConstantValues",
  "title" : "PHP Compatibility related issue (Parameter Values): New Password Algo Constant Values",
  "description" : "The constant value of the password hash algorithm constants has changed in PHP 7.4."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewProcOpenCmdArray",
  "title" : "PHP Compatibility related issue (Parameter Values): New Proc Open Cmd Array",
  "description" : "As of PHP 7.4, `proc_open()` now also accepts an array instead of a string for the command."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_NewStripTagsAllowableTagsArray",
  "title" : "PHP Compatibility related issue (Parameter Values): New Strip Tags Allowable Tags Array",
  "description" : "As of PHP 7.4, `strip_tags()` now also accepts an array of `$allowable_tags`."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedHashAlgorithms",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed Hash Algorithms",
  "description" : "Detect the use of deprecated and removed hash algorithms."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedIconvEncoding",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed Iconv Encoding",
  "description" : "Detect passing deprecated `$type` values to `iconv_get_encoding()`."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedImplodeFlexibleParamOrder",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed Implode Flexible Param Order",
  "description" : "Passing the `$glue` and `$pieces` parameters to `implode()` in reverse order has\nbeen deprecated in PHP 7.4."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedMbStrrposEncodingThirdParam",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed Mb Strrpos Encoding Third Param",
  "description" : "Detect passing `$encoding` to `mb_strrpos()` as 3rd argument."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedMbstringModifiers",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed Mbstring Modifiers",
  "description" : "Check for use of deprecated and removed regex modifiers for MbString regex functions."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedNonCryptoHash",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed Non Crypto Hash",
  "description" : "Detect usage of non-cryptographic hashes."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedPCREModifiers",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed PCRE Modifiers",
  "description" : "Check for the use of deprecated and removed regex modifiers for PCRE regex functions."
}, {
  "patternId" : "PHPCompatibility_ParameterValues_RemovedSetlocaleString",
  "title" : "PHP Compatibility related issue (Parameter Values): Removed Setlocale String",
  "description" : "Detect passing a string literal as `$category` to `setlocale()`."
}, {
  "patternId" : "PHPCompatibility_Syntax_ForbiddenCallTimePassByReference",
  "title" : "PHP Compatibility related issue (Syntax): Forbidden Call Time Pass By Reference",
  "description" : "Detect the use of call time pass by reference."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewArrayStringDereferencing",
  "title" : "PHP Compatibility related issue (Syntax): New Array String Dereferencing",
  "description" : "Detect array and string literal dereferencing."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewArrayUnpacking",
  "title" : "PHP Compatibility related issue (Syntax): New Array Unpacking",
  "description" : "Using the spread operator for unpacking arrays in array expressions is available since PHP 7.4."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewClassMemberAccess",
  "title" : "PHP Compatibility related issue (Syntax): New Class Member Access",
  "description" : "Detect class member access on object instantiation/cloning."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewDynamicAccessToStatic",
  "title" : "PHP Compatibility related issue (Syntax): New Dynamic Access To Static",
  "description" : "Detect dynamic access to static methods and properties, as well as class constants."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewFlexibleHeredocNowdoc",
  "title" : "PHP Compatibility related issue (Syntax): New Flexible Heredoc Nowdoc",
  "description" : "Detect usage of flexible heredoc/nowdoc and related cross-version incompatibilities."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewFunctionArrayDereferencing",
  "title" : "PHP Compatibility related issue (Syntax): New Function Array Dereferencing",
  "description" : "Detect function array dereferencing as introduced in PHP 5.4."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewFunctionCallTrailingComma",
  "title" : "PHP Compatibility related issue (Syntax): New Function Call Trailing Comma",
  "description" : "Detect trailing comma's in function calls, `isset()` and `unset()` as allowed since PHP 7.3."
}, {
  "patternId" : "PHPCompatibility_Syntax_NewShortArray",
  "title" : "PHP Compatibility related issue (Syntax): New Short Array",
  "description" : "Detect use of short array syntax which is available since PHP 5.4."
}, {
  "patternId" : "PHPCompatibility_Syntax_RemovedCurlyBraceArrayAccess",
  "title" : "PHP Compatibility related issue (Syntax): Removed Curly Brace Array Access",
  "description" : "Using the curly brace syntax to access array or string offsets has been deprecated in PHP 7.4."
}, {
  "patternId" : "PHPCompatibility_Syntax_RemovedNewReference",
  "title" : "PHP Compatibility related issue (Syntax): Removed New Reference",
  "description" : "Detect the use of assigning the return value of `new` by reference."
}, {
  "patternId" : "PHPCompatibility_TextStrings_NewUnicodeEscapeSequence",
  "title" : "PHP Compatibility related issue (Text Strings): New Unicode Escape Sequence",
  "description" : "PHP 7.0 introduced a Unicode codepoint escape sequence."
}, {
  "patternId" : "PHPCompatibility_TypeCasts_NewTypeCasts",
  "title" : "PHP Compatibility related issue (Type Casts): New Type Casts",
  "description" : "Detect use of newly introduced type casts."
}, {
  "patternId" : "PHPCompatibility_TypeCasts_RemovedTypeCasts",
  "title" : "PHP Compatibility related issue (Type Casts): Removed Type Casts",
  "description" : "Detect use of deprecated/removed type casts."
}, {
  "patternId" : "PHPCompatibility_Upgrade_LowPHP",
  "title" : "PHP Compatibility related issue (Upgrade): Low PHP",
  "description" : "Add a notification for users of low PHP versions."
}, {
  "patternId" : "PHPCompatibility_Upgrade_LowPHPCS",
  "title" : "PHP Compatibility related issue (Upgrade): Low PHPCS",
  "description" : "Add a notification for users of low PHPCS versions."
}, {
  "patternId" : "PHPCompatibility_UseDeclarations_NewGroupUseDeclarations",
  "title" : "PHP Compatibility related issue (Use Declarations): New Group Use Declarations",
  "description" : "Detect group use declarations as introduced in PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_UseDeclarations_NewUseConstFunction",
  "title" : "PHP Compatibility related issue (Use Declarations): New Use Const Function",
  "description" : "Detect importing constants and functions via a `use` statement."
}, {
  "patternId" : "PHPCompatibility_Variables_ForbiddenGlobalVariableVariable",
  "title" : "PHP Compatibility related issue (Variables): Forbidden Global Variable Variable",
  "description" : "Detect use of `global` with variable variables, support for which has been removed in PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_Variables_ForbiddenThisUseContexts",
  "title" : "PHP Compatibility related issue (Variables): Forbidden This Use Contexts",
  "description" : "Detect using `$this` in incompatible contexts."
}, {
  "patternId" : "PHPCompatibility_Variables_NewUniformVariableSyntax",
  "title" : "PHP Compatibility related issue (Variables): New Uniform Variable Syntax",
  "description" : "The interpretation of variable variables has changed in PHP 7.0."
}, {
  "patternId" : "PHPCompatibility_Variables_RemovedPredefinedGlobalVariables",
  "title" : "PHP Compatibility related issue (Variables): Removed Predefined Global Variables",
  "description" : "Detect the use of removed global variables. Suggests alternatives if available."
}, {
  "patternId" : "PSR12_Classes_AnonClassDeclaration",
  "title" : "Classes: Anon Class Declaration"
}, {
  "patternId" : "PSR12_Classes_ClassInstantiation",
  "title" : "Class Instantiation",
  "description" : "When instantiating a new class, parenthesis MUST always be present even when there are no arguments passed to the constructor."
}, {
  "patternId" : "PSR12_Classes_ClosingBrace",
  "title" : "Classes: Closing Brace"
}, {
  "patternId" : "PSR12_ControlStructures_BooleanOperatorPlacement",
  "title" : "Control Structures: Boolean Operator Placement"
}, {
  "patternId" : "PSR12_ControlStructures_ControlStructureSpacing",
  "title" : "Control Structures: Control Structure Spacing"
}, {
  "patternId" : "PSR12_Files_DeclareStatement",
  "title" : "Files: Declare Statement"
}, {
  "patternId" : "PSR12_Files_FileHeader",
  "title" : "Files: File Header"
}, {
  "patternId" : "PSR12_Files_ImportStatement",
  "title" : "Files: Import Statement"
}, {
  "patternId" : "PSR12_Files_OpenTag",
  "title" : "Files: Open Tag"
}, {
  "patternId" : "PSR12_Functions_NullableTypeDeclaration",
  "title" : "Nullable Type Declarations Functions",
  "description" : "In nullable type declarations there MUST NOT be a space between the question mark and the type."
}, {
  "patternId" : "PSR12_Functions_ReturnTypeDeclaration",
  "title" : "Functions: Return Type Declaration"
}, {
  "patternId" : "PSR12_Keywords_ShortFormTypeKeywords",
  "title" : "Short Form Type Keywords",
  "description" : "Short form of type keywords MUST be used i.e. bool instead of boolean, int instead of integer etc."
}, {
  "patternId" : "PSR12_Namespaces_CompoundNamespaceDepth",
  "title" : "Compound Namespace Depth",
  "description" : "Compound namespaces with a depth of more than two MUST NOT be used."
}, {
  "patternId" : "PSR12_Operators_OperatorSpacing",
  "title" : "Operator Spacing",
  "description" : "All binary and ternary (but not unary) operators MUST be preceded and followed by at least one space. This includes all arithmetic, comparison, assignment, bitwise, logical (excluding ! which is unary), string concatenation, type operators, trait operators (insteadof and as), and the single pipe operator (e.g. ExceptionType1 | ExceptionType2 $e)."
}, {
  "patternId" : "PSR12_Properties_ConstantVisibility",
  "title" : "Properties: Constant Visibility"
}, {
  "patternId" : "PSR12_Traits_UseDeclaration",
  "title" : "Traits: Use Declaration"
}, {
  "patternId" : "PSR1_Classes_ClassDeclaration",
  "title" : "Class Declaration",
  "description" : "Each class must be in a file by itself and must be under a namespace (a top-level vendor name)."
}, {
  "patternId" : "PSR1_Files_SideEffects",
  "title" : "Side Effects",
  "description" : "A php file should either contain declarations with no side effects, or should just have logic (including side effects) with no declarations."
}, {
  "patternId" : "PSR1_Methods_CamelCapsMethodName",
  "title" : "Method Name",
  "description" : "Method names MUST be declared in camelCase."
}, {
  "patternId" : "PSR2_Classes_ClassDeclaration",
  "title" : "Class Declarations",
  "description" : "There should be exactly 1 space between the abstract or final keyword and the class keyword and between the class keyword and the class name.  The extends and implements keywords, if present, must be on the same line as the class name.  When interfaces implemented are spread over multiple lines, there should be exactly 1 interface mentioned per line indented by 1 level.  The closing brace of the class must go on the first line after the body of the class and must be on a line by itself."
}, {
  "patternId" : "PSR2_Classes_PropertyDeclaration",
  "title" : "Property Declarations",
  "description" : "Property names should not be prefixed with an underscore to indicate visibility.  Visibility should be used to declare properties rather than the var keyword.  Only one property should be declared within a statement.  The static declaration must come after the visibility declaration."
}, {
  "patternId" : "PSR2_ControlStructures_ControlStructureSpacing",
  "title" : "Control Structure Spacing",
  "description" : "Control Structures should have 0 spaces after opening parentheses and 0 spaces before closing parentheses."
}, {
  "patternId" : "PSR2_ControlStructures_ElseIfDeclaration",
  "title" : "Elseif Declarations",
  "description" : "PHP's elseif keyword should be used instead of else if."
}, {
  "patternId" : "PSR2_ControlStructures_SwitchDeclaration",
  "title" : "Switch Declarations",
  "description" : "Case statements should be indented 4 spaces from the switch keyword.  It should also be followed by a space.  Colons in switch declarations should not be preceded by whitespace.  Break statements should be indented 4 more spaces from the case statement.  There must be a comment when falling through from one case into the next."
}, {
  "patternId" : "PSR2_Files_ClosingTag",
  "title" : "Files: Closing Tag"
}, {
  "patternId" : "PSR2_Files_EndFileNewline",
  "title" : "End File Newline",
  "description" : "PHP Files should end with exactly one newline."
}, {
  "patternId" : "PSR2_Methods_FunctionCallSignature",
  "title" : "Methods: Function Call Signature"
}, {
  "patternId" : "PSR2_Methods_FunctionClosingBrace",
  "title" : "Methods: Function Closing Brace"
}, {
  "patternId" : "PSR2_Methods_MethodDeclaration",
  "title" : "Method Declarations",
  "description" : "Method names should not be prefixed with an underscore to indicate visibility.  The static keyword, when present, should come after the visibility declaration, and the final and abstract keywords should come before."
}, {
  "patternId" : "PSR2_Namespaces_NamespaceDeclaration",
  "title" : "Namespace Declarations",
  "description" : "There must be one blank line after the namespace declaration."
}, {
  "patternId" : "PSR2_Namespaces_UseDeclaration",
  "title" : "Namespace Declarations",
  "description" : "Each use declaration must contain only one namespace and must come after the first namespace declaration.  There should be one blank line after the final use statement."
}, {
  "patternId" : "Security_BadFunctions_Asserts",
  "title" : "Security Bad Functions related issue: Asserts"
}, {
  "patternId" : "Security_BadFunctions_Backticks",
  "title" : "Security Bad Functions related issue: Backticks"
}, {
  "patternId" : "Security_BadFunctions_CallbackFunctions",
  "title" : "Security Bad Functions related issue: Callback Functions"
}, {
  "patternId" : "Security_BadFunctions_CryptoFunctions",
  "title" : "Security Bad Functions related issue: Crypto Functions"
}, {
  "patternId" : "Security_BadFunctions_EasyRFI",
  "title" : "Security Bad Functions related issue: Easy RFI"
}, {
  "patternId" : "Security_BadFunctions_EasyXSS",
  "title" : "Security Bad Functions related issue: Easy XSS"
}, {
  "patternId" : "Security_BadFunctions_ErrorHandling",
  "title" : "Security Bad Functions related issue: Error Handling"
}, {
  "patternId" : "Security_BadFunctions_FilesystemFunctions",
  "title" : "Security Bad Functions related issue: Filesystem Functions"
}, {
  "patternId" : "Security_BadFunctions_FringeFunctions",
  "title" : "Security Bad Functions related issue: Fringe Functions"
}, {
  "patternId" : "Security_BadFunctions_FunctionHandlingFunctions",
  "title" : "Security Bad Functions related issue: Function Handling Functions"
}, {
  "patternId" : "Security_BadFunctions_Mysqli",
  "title" : "Security Bad Functions related issue: Mysqli"
}, {
  "patternId" : "Security_BadFunctions_NoEvals",
  "title" : "Security Bad Functions related issue: No Evals"
}, {
  "patternId" : "Security_BadFunctions_Phpinfos",
  "title" : "Security Bad Functions related issue: Phpinfos"
}, {
  "patternId" : "Security_BadFunctions_PregReplace",
  "title" : "Security Bad Functions related issue: Preg Replace"
}, {
  "patternId" : "Security_BadFunctions_SQLFunctions",
  "title" : "Security Bad Functions related issue: SQL Functions"
}, {
  "patternId" : "Security_BadFunctions_SystemExecFunctions",
  "title" : "Security Bad Functions related issue: System Exec Functions"
}, {
  "patternId" : "Security_CVE_20132110",
  "title" : "Security CVE related issue: 20132110"
}, {
  "patternId" : "Security_CVE_20134113",
  "title" : "Security CVE related issue: 20134113"
}, {
  "patternId" : "Security_Drupal7_AESModule",
  "title" : "Security Drupal7 related issue: AES Module"
}, {
  "patternId" : "Security_Drupal7_AdvisoriesContrib",
  "title" : "Security Drupal7 related issue: Advisories Contrib"
}, {
  "patternId" : "Security_Drupal7_AdvisoriesCore",
  "title" : "Security Drupal7 related issue: Advisories Core"
}, {
  "patternId" : "Security_Drupal7_Cachei",
  "title" : "Security Drupal7 related issue: Cachei"
}, {
  "patternId" : "Security_Drupal7_DbQueryAC",
  "title" : "Security Drupal7 related issue: Db Query AC"
}, {
  "patternId" : "Security_Drupal7_DynQueries",
  "title" : "Security Drupal7 related issue: Dyn Queries"
}, {
  "patternId" : "Security_Drupal7_HttpRequest",
  "title" : "Security Drupal7 related issue: Http Request"
}, {
  "patternId" : "Security_Drupal7_SQLi",
  "title" : "Security Drupal7 related issue: SQ Li"
}, {
  "patternId" : "Security_Drupal7_UserInputWatch",
  "title" : "Security Drupal7 related issue: User Input Watch"
}, {
  "patternId" : "Security_Drupal7_XSSFormValue",
  "title" : "Security Drupal7 related issue: XSS Form Value"
}, {
  "patternId" : "Security_Drupal7_XSSHTMLConstruct",
  "title" : "Security Drupal7 related issue: XSSHTML Construct"
}, {
  "patternId" : "Security_Drupal7_XSSPTheme",
  "title" : "Security Drupal7 related issue: XSSP Theme"
}, {
  "patternId" : "Security_Misc_BadCorsHeader",
  "title" : "Security Misc related issue: Bad Cors Header"
}, {
  "patternId" : "Security_Misc_IncludeMismatch",
  "title" : "Security Misc related issue: Include Mismatch"
}, {
  "patternId" : "SlevomatCodingStandard_Arrays_DisallowImplicitArrayCreation",
  "title" : "Arrays: Disallow Implicit Array Creation"
}, {
  "patternId" : "SlevomatCodingStandard_Arrays_MultiLineArrayEndBracketPlacement",
  "title" : "Arrays: Multi Line Array End Bracket Placement"
}, {
  "patternId" : "SlevomatCodingStandard_Arrays_SingleLineArrayWhitespace",
  "title" : "Arrays: Single Line Array Whitespace"
}, {
  "patternId" : "SlevomatCodingStandard_Arrays_TrailingArrayComma",
  "title" : "Arrays: Trailing Array Comma"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_ClassConstantVisibility",
  "title" : "Classes: Class Constant Visibility"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_ClassStructure",
  "title" : "Classes: Class Structure"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_ConstantSpacing",
  "title" : "Classes: Constant Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_DisallowLateStaticBindingForConstants",
  "title" : "Classes: Disallow Late Static Binding For Constants"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_DisallowMultiConstantDefinition",
  "title" : "Classes: Disallow Multi Constant Definition"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_DisallowMultiPropertyDefinition",
  "title" : "Classes: Disallow Multi Property Definition"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_EmptyLinesAroundClassBraces",
  "title" : "Classes: Empty Lines Around Class Braces"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_MethodSpacing",
  "title" : "Classes: Method Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_ModernClassNameReference",
  "title" : "Classes: Modern Class Name Reference"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_ParentCallSpacing",
  "title" : "Classes: Parent Call Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_PropertySpacing",
  "title" : "Classes: Property Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_RequireMultiLineMethodSignature",
  "title" : "Classes: Require Multi Line Method Signature"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_RequireSingleLineMethodSignature",
  "title" : "Classes: Require Single Line Method Signature"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_SuperfluousAbstractClassNaming",
  "title" : "Classes: Superfluous Abstract Class Naming"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_SuperfluousExceptionNaming",
  "title" : "Classes: Superfluous Exception Naming"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_SuperfluousInterfaceNaming",
  "title" : "Classes: Superfluous Interface Naming"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_SuperfluousTraitNaming",
  "title" : "Classes: Superfluous Trait Naming"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_TraitUseDeclaration",
  "title" : "Classes: Trait Use Declaration"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_TraitUseSpacing",
  "title" : "Classes: Trait Use Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_UnusedPrivateElements",
  "title" : "Classes: Unused Private Elements"
}, {
  "patternId" : "SlevomatCodingStandard_Classes_UselessLateStaticBinding",
  "title" : "Classes: Useless Late Static Binding"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_DisallowCommentAfterCode",
  "title" : "Commenting: Disallow Comment After Code"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_DisallowOneLinePropertyDocComment",
  "title" : "Commenting: Disallow One Line Property Doc Comment"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_DocCommentSpacing",
  "title" : "Commenting: Doc Comment Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_EmptyComment",
  "title" : "Commenting: Empty Comment"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_ForbiddenAnnotations",
  "title" : "Commenting: Forbidden Annotations"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_ForbiddenComments",
  "title" : "Commenting: Forbidden Comments"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_InlineDocCommentDeclaration",
  "title" : "Commenting: Inline Doc Comment Declaration"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_RequireOneLineDocComment",
  "title" : "Commenting: Require One Line Doc Comment"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_RequireOneLinePropertyDocComment",
  "title" : "Commenting: Require One Line Property Doc Comment"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_UselessFunctionDocComment",
  "title" : "Commenting: Useless Function Doc Comment"
}, {
  "patternId" : "SlevomatCodingStandard_Commenting_UselessInheritDocComment",
  "title" : "Commenting: Useless Inherit Doc Comment"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_AssignmentInCondition",
  "title" : "Control Structures: Assignment In Condition"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_BlockControlStructureSpacing",
  "title" : "Control Structures: Block Control Structure Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_DisallowContinueWithoutIntegerOperandInSwitch",
  "title" : "Control Structures: Disallow Continue Without Integer Operand In Switch"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_DisallowEmpty",
  "title" : "Control Structures: Disallow Empty"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_DisallowShortTernaryOperator",
  "title" : "Control Structures: Disallow Short Ternary Operator"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_DisallowYodaComparison",
  "title" : "Control Structures: Disallow Yoda Comparison"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_EarlyExit",
  "title" : "Control Structures: Early Exit"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_JumpStatementsSpacing",
  "title" : "Control Structures: Jump Statements Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_LanguageConstructWithParentheses",
  "title" : "Control Structures: Language Construct With Parentheses"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_NewWithParentheses",
  "title" : "Control Structures: New With Parentheses"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_NewWithoutParentheses",
  "title" : "Control Structures: New Without Parentheses"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_RequireMultiLineTernaryOperator",
  "title" : "Control Structures: Require Multi Line Ternary Operator"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_RequireNullCoalesceEqualOperator",
  "title" : "Control Structures: Require Null Coalesce Equal Operator"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_RequireNullCoalesceOperator",
  "title" : "Control Structures: Require Null Coalesce Operator"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_RequireShortTernaryOperator",
  "title" : "Control Structures: Require Short Ternary Operator"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_RequireTernaryOperator",
  "title" : "Control Structures: Require Ternary Operator"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_RequireYodaComparison",
  "title" : "Control Structures: Require Yoda Comparison"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_UselessIfConditionWithReturn",
  "title" : "Control Structures: Useless If Condition With Return"
}, {
  "patternId" : "SlevomatCodingStandard_ControlStructures_UselessTernaryOperator",
  "title" : "Control Structures: Useless Ternary Operator"
}, {
  "patternId" : "SlevomatCodingStandard_Exceptions_DeadCatch",
  "title" : "Exceptions: Dead Catch"
}, {
  "patternId" : "SlevomatCodingStandard_Exceptions_ReferenceThrowableOnly",
  "title" : "Exceptions: Reference Throwable Only"
}, {
  "patternId" : "SlevomatCodingStandard_Files_LineLength",
  "title" : "Files: Line Length"
}, {
  "patternId" : "SlevomatCodingStandard_Files_TypeNameMatchesFileName",
  "title" : "Files: Type Name Matches File Name"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_ArrowFunctionDeclaration",
  "title" : "Functions: Arrow Function Declaration"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_DisallowArrowFunction",
  "title" : "Functions: Disallow Arrow Function"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_DisallowEmptyFunction",
  "title" : "Functions: Disallow Empty Function"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_RequireArrowFunction",
  "title" : "Functions: Require Arrow Function"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_StaticClosure",
  "title" : "Functions: Static Closure"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_TrailingCommaInCall",
  "title" : "Functions: Trailing Comma In Call"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_UnusedInheritedVariablePassedToClosure",
  "title" : "Functions: Unused Inherited Variable Passed To Closure"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_UnusedParameter",
  "title" : "Functions: Unused Parameter"
}, {
  "patternId" : "SlevomatCodingStandard_Functions_UselessParameterDefaultValue",
  "title" : "Functions: Useless Parameter Default Value"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_AlphabeticallySortedUses",
  "title" : "Namespaces: Alphabetically Sorted Uses"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_DisallowGroupUse",
  "title" : "Namespaces: Disallow Group Use"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_FullyQualifiedClassNameAfterKeyword",
  "title" : "Namespaces: Fully Qualified Class Name After Keyword"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_FullyQualifiedClassNameInAnnotation",
  "title" : "Namespaces: Fully Qualified Class Name In Annotation"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_FullyQualifiedExceptions",
  "title" : "Namespaces: Fully Qualified Exceptions"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_FullyQualifiedGlobalConstants",
  "title" : "Namespaces: Fully Qualified Global Constants"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_FullyQualifiedGlobalFunctions",
  "title" : "Namespaces: Fully Qualified Global Functions"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_MultipleUsesPerLine",
  "title" : "Namespaces: Multiple Uses Per Line"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_NamespaceDeclaration",
  "title" : "Namespaces: Namespace Declaration"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_NamespaceSpacing",
  "title" : "Namespaces: Namespace Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_ReferenceUsedNamesOnly",
  "title" : "Namespaces: Reference Used Names Only"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_RequireOneNamespaceInFile",
  "title" : "Namespaces: Require One Namespace In File"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_UnusedUses",
  "title" : "Namespaces: Unused Uses"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_UseDoesNotStartWithBackslash",
  "title" : "Namespaces: Use Does Not Start With Backslash"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_UseFromSameNamespace",
  "title" : "Namespaces: Use From Same Namespace"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_UseOnlyWhitelistedNamespaces",
  "title" : "Namespaces: Use Only Whitelisted Namespaces"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_UseSpacing",
  "title" : "Namespaces: Use Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Namespaces_UselessAlias",
  "title" : "Namespaces: Useless Alias"
}, {
  "patternId" : "SlevomatCodingStandard_Numbers_DisallowNumericLiteralSeparator",
  "title" : "Numbers: Disallow Numeric Literal Separator"
}, {
  "patternId" : "SlevomatCodingStandard_Numbers_RequireNumericLiteralSeparator",
  "title" : "Numbers: Require Numeric Literal Separator"
}, {
  "patternId" : "SlevomatCodingStandard_Operators_DisallowEqualOperators",
  "title" : "Operators: Disallow Equal Operators"
}, {
  "patternId" : "SlevomatCodingStandard_Operators_DisallowIncrementAndDecrementOperators",
  "title" : "Operators: Disallow Increment And Decrement Operators"
}, {
  "patternId" : "SlevomatCodingStandard_Operators_NegationOperatorSpacing",
  "title" : "Operators: Negation Operator Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_Operators_RequireCombinedAssignmentOperator",
  "title" : "Operators: Require Combined Assignment Operator"
}, {
  "patternId" : "SlevomatCodingStandard_Operators_RequireOnlyStandaloneIncrementAndDecrementOperators",
  "title" : "Operators: Require Only Standalone Increment And Decrement Operators"
}, {
  "patternId" : "SlevomatCodingStandard_Operators_SpreadOperatorSpacing",
  "title" : "Operators: Spread Operator Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_DisallowDirectMagicInvokeCall",
  "title" : "PHP: Disallow Direct Magic Invoke Call"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_DisallowReference",
  "title" : "PHP: Disallow Reference"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_OptimizedFunctionsWithoutUnpacking",
  "title" : "PHP: Optimized Functions Without Unpacking"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_ReferenceSpacing",
  "title" : "PHP: Reference Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_RequireExplicitAssertion",
  "title" : "PHP: Require Explicit Assertion"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_RequireNowdoc",
  "title" : "PHP: Require Nowdoc"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_ShortList",
  "title" : "PHP: Short List"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_TypeCast",
  "title" : "PHP: Type Cast"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_UselessParentheses",
  "title" : "PHP: Useless Parentheses"
}, {
  "patternId" : "SlevomatCodingStandard_PHP_UselessSemicolon",
  "title" : "PHP: Useless Semicolon"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_DeclareStrictTypes",
  "title" : "Type Hints: Declare Strict Types"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_DisallowArrayTypeHintSyntax",
  "title" : "Type Hints: Disallow Array Type Hint Syntax"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_DisallowMixedTypeHint",
  "title" : "Type Hints: Disallow Mixed Type Hint"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_LongTypeHints",
  "title" : "Type Hints: Long Type Hints"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_NullTypeHintOnLastPosition",
  "title" : "Type Hints: Null Type Hint On Last Position"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_NullableTypeForNullDefaultValue",
  "title" : "Type Hints: Nullable Type For Null Default Value"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_ParameterTypeHint",
  "title" : "Type Hints: Parameter Type Hint"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_ParameterTypeHintSpacing",
  "title" : "Type Hints: Parameter Type Hint Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_PropertyTypeHint",
  "title" : "Type Hints: Property Type Hint"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_PropertyTypeHintSpacing",
  "title" : "Type Hints: Property Type Hint Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_ReturnTypeHint",
  "title" : "Type Hints: Return Type Hint"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_ReturnTypeHintSpacing",
  "title" : "Type Hints: Return Type Hint Spacing"
}, {
  "patternId" : "SlevomatCodingStandard_TypeHints_UselessConstantTypeHint",
  "title" : "Type Hints: Useless Constant Type Hint"
}, {
  "patternId" : "SlevomatCodingStandard_Variables_DisallowSuperGlobalVariable",
  "title" : "Variables: Disallow Super Global Variable"
}, {
  "patternId" : "SlevomatCodingStandard_Variables_DuplicateAssignmentToVariable",
  "title" : "Variables: Duplicate Assignment To Variable"
}, {
  "patternId" : "SlevomatCodingStandard_Variables_UnusedVariable",
  "title" : "Variables: Unused Variable"
}, {
  "patternId" : "SlevomatCodingStandard_Variables_UselessVariable",
  "title" : "Variables: Useless Variable"
}, {
  "patternId" : "SlevomatCodingStandard_Whitespaces_DuplicateSpaces",
  "title" : "Whitespaces: Duplicate Spaces"
}, {
  "patternId" : "Squiz_Arrays_ArrayBracketSpacing",
  "title" : "Array Bracket Spacing",
  "description" : "When referencing arrays you should not put whitespace around the opening bracket or before the closing bracket."
}, {
  "patternId" : "Squiz_Arrays_ArrayDeclaration",
  "title" : "Array Declarations",
  "description" : "This standard covers all array declarations, regardless of the number and type of values contained within the array."
}, {
  "patternId" : "Squiz_CSS_ClassDefinitionClosingBraceSpace",
  "title" : "CSS: Class Definition Closing Brace Space"
}, {
  "patternId" : "Squiz_CSS_ClassDefinitionNameSpacing",
  "title" : "CSS: Class Definition Name Spacing"
}, {
  "patternId" : "Squiz_CSS_ClassDefinitionOpeningBraceSpace",
  "title" : "CSS: Class Definition Opening Brace Space"
}, {
  "patternId" : "Squiz_CSS_ColonSpacing",
  "title" : "CSS: Colon Spacing"
}, {
  "patternId" : "Squiz_CSS_ColourDefinition",
  "title" : "CSS: Colour Definition"
}, {
  "patternId" : "Squiz_CSS_DisallowMultipleStyleDefinitions",
  "title" : "CSS: Disallow Multiple Style Definitions"
}, {
  "patternId" : "Squiz_CSS_DuplicateClassDefinition",
  "title" : "CSS: Duplicate Class Definition"
}, {
  "patternId" : "Squiz_CSS_DuplicateStyleDefinition",
  "title" : "CSS: Duplicate Style Definition"
}, {
  "patternId" : "Squiz_CSS_EmptyClassDefinition",
  "title" : "CSS: Empty Class Definition"
}, {
  "patternId" : "Squiz_CSS_EmptyStyleDefinition",
  "title" : "CSS: Empty Style Definition"
}, {
  "patternId" : "Squiz_CSS_ForbiddenStyles",
  "title" : "CSS: Forbidden Styles"
}, {
  "patternId" : "Squiz_CSS_Indentation",
  "title" : "CSS: Indentation"
}, {
  "patternId" : "Squiz_CSS_LowercaseStyleDefinition",
  "title" : "CSS: Lowercase Style Definition"
}, {
  "patternId" : "Squiz_CSS_MissingColon",
  "title" : "CSS: Missing Colon"
}, {
  "patternId" : "Squiz_CSS_NamedColours",
  "title" : "CSS: Named Colours"
}, {
  "patternId" : "Squiz_CSS_Opacity",
  "title" : "CSS: Opacity"
}, {
  "patternId" : "Squiz_CSS_SemicolonSpacing",
  "title" : "CSS: Semicolon Spacing"
}, {
  "patternId" : "Squiz_CSS_ShorthandSize",
  "title" : "CSS: Shorthand Size"
}, {
  "patternId" : "Squiz_Classes_ClassDeclaration",
  "title" : "Classes: Class Declaration"
}, {
  "patternId" : "Squiz_Classes_ClassFileName",
  "title" : "Classes: Class File Name"
}, {
  "patternId" : "Squiz_Classes_DuplicateProperty",
  "title" : "Classes: Duplicate Property"
}, {
  "patternId" : "Squiz_Classes_LowercaseClassKeywords",
  "title" : "Lowercase Class Keywords",
  "description" : "The php keywords class, interface, trait, extends, implements, abstract, final, var, and const should be lowercase."
}, {
  "patternId" : "Squiz_Classes_SelfMemberReference",
  "title" : "Self Member Reference",
  "description" : "The self keyword should be used instead of the current class name, should be lowercase, and should not have spaces before or after it."
}, {
  "patternId" : "Squiz_Classes_ValidClassName",
  "title" : "Classes: Valid Class Name"
}, {
  "patternId" : "Squiz_Commenting_BlockComment",
  "title" : "Commenting: Block Comment"
}, {
  "patternId" : "Squiz_Commenting_ClassComment",
  "title" : "Commenting: Class Comment"
}, {
  "patternId" : "Squiz_Commenting_ClosingDeclarationComment",
  "title" : "Commenting: Closing Declaration Comment"
}, {
  "patternId" : "Squiz_Commenting_DocCommentAlignment",
  "title" : "Doc Comment Alignment",
  "description" : "The asterisks in a doc comment should align, and there should be one space between the asterisk and tags."
}, {
  "patternId" : "Squiz_Commenting_EmptyCatchComment",
  "title" : "Commenting: Empty Catch Comment"
}, {
  "patternId" : "Squiz_Commenting_FileComment",
  "title" : "Commenting: File Comment"
}, {
  "patternId" : "Squiz_Commenting_FunctionComment",
  "title" : "Commenting: Function Comment"
}, {
  "patternId" : "Squiz_Commenting_FunctionCommentThrowTag",
  "title" : "Doc Comment Throws Tag",
  "description" : "If a function throws any exceptions, they should be documented in a @throws tag."
}, {
  "patternId" : "Squiz_Commenting_InlineComment",
  "title" : "Commenting: Inline Comment"
}, {
  "patternId" : "Squiz_Commenting_LongConditionClosingComment",
  "title" : "Commenting: Long Condition Closing Comment"
}, {
  "patternId" : "Squiz_Commenting_PostStatementComment",
  "title" : "Commenting: Post Statement Comment"
}, {
  "patternId" : "Squiz_Commenting_VariableComment",
  "title" : "Commenting: Variable Comment"
}, {
  "patternId" : "Squiz_ControlStructures_ControlSignature",
  "title" : "Control Structures: Control Signature"
}, {
  "patternId" : "Squiz_ControlStructures_ElseIfDeclaration",
  "title" : "Control Structures: Else If Declaration"
}, {
  "patternId" : "Squiz_ControlStructures_ForEachLoopDeclaration",
  "title" : "Foreach Loop Declarations",
  "description" : "There should be a space between each element of a foreach loop and the as keyword should be lowercase."
}, {
  "patternId" : "Squiz_ControlStructures_ForLoopDeclaration",
  "title" : "For Loop Declarations",
  "description" : "In a for loop declaration, there should be no space inside the brackets and there should be 0 spaces before and 1 space after semicolons."
}, {
  "patternId" : "Squiz_ControlStructures_InlineIfDeclaration",
  "title" : "Control Structures: Inline If Declaration"
}, {
  "patternId" : "Squiz_ControlStructures_LowercaseDeclaration",
  "title" : "Lowercase Control Structure Keywords",
  "description" : "The php keywords if, else, elseif, foreach, for, do, switch, while, try, and catch should be lowercase."
}, {
  "patternId" : "Squiz_ControlStructures_SwitchDeclaration",
  "title" : "Control Structures: Switch Declaration"
}, {
  "patternId" : "Squiz_Debug_JSLint",
  "title" : "Debug: JS Lint"
}, {
  "patternId" : "Squiz_Debug_JavaScriptLint",
  "title" : "Debug: Java Script Lint"
}, {
  "patternId" : "Squiz_Files_FileExtension",
  "title" : "Files: File Extension"
}, {
  "patternId" : "Squiz_Formatting_OperatorBracket",
  "title" : "Formatting: Operator Bracket"
}, {
  "patternId" : "Squiz_Functions_FunctionDeclaration",
  "title" : "Functions: Function Declaration"
}, {
  "patternId" : "Squiz_Functions_FunctionDeclarationArgumentSpacing",
  "title" : "Functions: Function Declaration Argument Spacing"
}, {
  "patternId" : "Squiz_Functions_FunctionDuplicateArgument",
  "title" : "Lowercase Built-In functions",
  "description" : "All PHP built-in functions should be lowercased when called."
}, {
  "patternId" : "Squiz_Functions_GlobalFunction",
  "title" : "Functions: Global Function"
}, {
  "patternId" : "Squiz_Functions_LowercaseFunctionKeywords",
  "title" : "Lowercase Function Keywords",
  "description" : "The php keywords function, public, private, protected, and static should be lowercase."
}, {
  "patternId" : "Squiz_Functions_MultiLineFunctionDeclaration",
  "title" : "Functions: Multi Line Function Declaration"
}, {
  "patternId" : "Squiz_NamingConventions_ValidFunctionName",
  "title" : "Naming Conventions: Valid Function Name"
}, {
  "patternId" : "Squiz_NamingConventions_ValidVariableName",
  "title" : "Naming Conventions: Valid Variable Name"
}, {
  "patternId" : "Squiz_Objects_DisallowObjectStringIndex",
  "title" : "Objects: Disallow Object String Index"
}, {
  "patternId" : "Squiz_Objects_ObjectInstantiation",
  "title" : "Objects: Object Instantiation"
}, {
  "patternId" : "Squiz_Objects_ObjectMemberComma",
  "title" : "Objects: Object Member Comma"
}, {
  "patternId" : "Squiz_Operators_ComparisonOperatorUsage",
  "title" : "Operators: Comparison Operator Usage"
}, {
  "patternId" : "Squiz_Operators_IncrementDecrementUsage",
  "title" : "Operators: Increment Decrement Usage"
}, {
  "patternId" : "Squiz_Operators_ValidLogicalOperators",
  "title" : "Operators: Valid Logical Operators"
}, {
  "patternId" : "Squiz_PHP_CommentedOutCode",
  "title" : "PHP: Commented Out Code"
}, {
  "patternId" : "Squiz_PHP_DisallowBooleanStatement",
  "title" : "PHP: Disallow Boolean Statement"
}, {
  "patternId" : "Squiz_PHP_DisallowComparisonAssignment",
  "title" : "PHP: Disallow Comparison Assignment"
}, {
  "patternId" : "Squiz_PHP_DisallowInlineIf",
  "title" : "PHP: Disallow Inline If"
}, {
  "patternId" : "Squiz_PHP_DisallowMultipleAssignments",
  "title" : "PHP: Disallow Multiple Assignments"
}, {
  "patternId" : "Squiz_PHP_DisallowSizeFunctionsInLoops",
  "title" : "PHP: Disallow Size Functions In Loops"
}, {
  "patternId" : "Squiz_PHP_DiscouragedFunctions",
  "title" : "PHP: Discouraged Functions"
}, {
  "patternId" : "Squiz_PHP_EmbeddedPhp",
  "title" : "PHP: Embedded Php"
}, {
  "patternId" : "Squiz_PHP_Eval",
  "title" : "PHP: Eval"
}, {
  "patternId" : "Squiz_PHP_GlobalKeyword",
  "title" : "PHP: Global Keyword"
}, {
  "patternId" : "Squiz_PHP_Heredoc",
  "title" : "PHP: Heredoc"
}, {
  "patternId" : "Squiz_PHP_InnerFunctions",
  "title" : "PHP: Inner Functions"
}, {
  "patternId" : "Squiz_PHP_LowercasePHPFunctions",
  "title" : "PHP: Lowercase PHP Functions"
}, {
  "patternId" : "Squiz_PHP_NonExecutableCode",
  "title" : "PHP: Non Executable Code"
}, {
  "patternId" : "Squiz_Scope_MemberVarScope",
  "title" : "Scope: Member Var Scope"
}, {
  "patternId" : "Squiz_Scope_MethodScope",
  "title" : "Scope: Method Scope"
}, {
  "patternId" : "Squiz_Scope_StaticThisUsage",
  "title" : "Static This Usage",
  "description" : "Static methods should not use $this."
}, {
  "patternId" : "Squiz_Strings_ConcatenationSpacing",
  "title" : "Strings: Concatenation Spacing"
}, {
  "patternId" : "Squiz_Strings_DoubleQuoteUsage",
  "title" : "Strings: Double Quote Usage"
}, {
  "patternId" : "Squiz_Strings_EchoedStrings",
  "title" : "Echoed Strings",
  "description" : "Simple strings should not be enclosed in parentheses when being echoed."
}, {
  "patternId" : "Squiz_WhiteSpace_CastSpacing",
  "title" : "Cast Whitespace",
  "description" : "Casts should not have whitespace inside the parentheses."
}, {
  "patternId" : "Squiz_WhiteSpace_ControlStructureSpacing",
  "title" : "White Space: Control Structure Spacing"
}, {
  "patternId" : "Squiz_WhiteSpace_FunctionClosingBraceSpace",
  "title" : "White Space: Function Closing Brace Space"
}, {
  "patternId" : "Squiz_WhiteSpace_FunctionOpeningBraceSpace",
  "title" : "White Space: Function Opening Brace Space"
}, {
  "patternId" : "Squiz_WhiteSpace_FunctionSpacing",
  "title" : "White Space: Function Spacing"
}, {
  "patternId" : "Squiz_WhiteSpace_LanguageConstructSpacing",
  "title" : "Language Construct Whitespace",
  "description" : "The php constructs echo, print, return, include, include_once, require, require_once, and new should have one space after them."
}, {
  "patternId" : "Squiz_WhiteSpace_LogicalOperatorSpacing",
  "title" : "White Space: Logical Operator Spacing"
}, {
  "patternId" : "Squiz_WhiteSpace_MemberVarSpacing",
  "title" : "White Space: Member Var Spacing"
}, {
  "patternId" : "Squiz_WhiteSpace_ObjectOperatorSpacing",
  "title" : "Object Operator Spacing",
  "description" : "The object operator (->) should not have any space around it."
}, {
  "patternId" : "Squiz_WhiteSpace_OperatorSpacing",
  "title" : "White Space: Operator Spacing"
}, {
  "patternId" : "Squiz_WhiteSpace_PropertyLabelSpacing",
  "title" : "White Space: Property Label Spacing"
}, {
  "patternId" : "Squiz_WhiteSpace_ScopeClosingBrace",
  "title" : "White Space: Scope Closing Brace"
}, {
  "patternId" : "Squiz_WhiteSpace_ScopeKeywordSpacing",
  "title" : "Scope Keyword Spacing",
  "description" : "The php keywords static, public, private, and protected should have one space after them."
}, {
  "patternId" : "Squiz_WhiteSpace_SemicolonSpacing",
  "title" : "Semicolon Spacing",
  "description" : "Semicolons should not have spaces before them."
}, {
  "patternId" : "Squiz_WhiteSpace_SuperfluousWhitespace",
  "title" : "White Space: Superfluous Whitespace"
}, {
  "patternId" : "WordPress_Arrays_ArrayDeclarationSpacing",
  "title" : "Arrays: Array Declaration Spacing",
  "description" : "Enforces WordPress array spacing format."
}, {
  "patternId" : "WordPress_Arrays_ArrayIndentation",
  "title" : "Arrays: Array Indentation",
  "description" : "Enforces WordPress array indentation for multi-line arrays."
}, {
  "patternId" : "WordPress_Arrays_ArrayKeySpacingRestrictions",
  "title" : "Arrays: Array Key Spacing Restrictions",
  "description" : "Check for proper spacing in array key references."
}, {
  "patternId" : "WordPress_Arrays_CommaAfterArrayItem",
  "title" : "Arrays: Comma After Array Item",
  "description" : "Enforces a comma after each array item and the spacing around it."
}, {
  "patternId" : "WordPress_Arrays_MultipleStatementAlignment",
  "title" : "Arrays: Multiple Statement Alignment",
  "description" : "Enforces alignment of the double arrow assignment operator for multi-item, multi-line arrays."
}, {
  "patternId" : "WordPress_Classes_ClassInstantiation",
  "title" : "Classes: Class Instantiation",
  "description" : "Verifies object instantiation statements."
}, {
  "patternId" : "WordPress_CodeAnalysis_AssignmentInCondition",
  "title" : "Code Analysis: Assignment In Condition",
  "description" : "Detects variable assignments being made within conditions."
}, {
  "patternId" : "WordPress_CodeAnalysis_EmptyStatement",
  "title" : "Code Analysis: Empty Statement",
  "description" : "Checks against empty statements."
}, {
  "patternId" : "WordPress_CodeAnalysis_EscapedNotTranslated",
  "title" : "Code Analysis: Escaped Not Translated",
  "description" : "Flag calls to escaping functions which look like they may have been intended\nas calls to the \"translate + escape\" sister-function due to the presence of\nmore than one parameter."
}, {
  "patternId" : "WordPress_DB_DirectDatabaseQuery",
  "title" : "DB: Direct Database Query",
  "description" : "Flag Database direct queries."
}, {
  "patternId" : "WordPress_DB_PreparedSQL",
  "title" : "DB: Prepared SQL",
  "description" : "Sniff for prepared SQL."
}, {
  "patternId" : "WordPress_DB_PreparedSQLPlaceholders",
  "title" : "DB: Prepared SQL Placeholders",
  "description" : "Check for incorrect use of the $wpdb->prepare method."
}, {
  "patternId" : "WordPress_DB_RestrictedClasses",
  "title" : "DB: Restricted Classes",
  "description" : "Verifies that no database related PHP classes are used."
}, {
  "patternId" : "WordPress_DB_RestrictedFunctions",
  "title" : "DB: Restricted Functions",
  "description" : "Verifies that no database related PHP functions are used."
}, {
  "patternId" : "WordPress_DB_SlowDBQuery",
  "title" : "DB: Slow DB Query",
  "description" : "Flag potentially slow queries."
}, {
  "patternId" : "WordPress_DateTime_CurrentTimeTimestamp",
  "title" : "Date Time: Current Time Timestamp",
  "description" : "Don't use current_time() to get a (timezone corrected) \"timestamp\"."
}, {
  "patternId" : "WordPress_DateTime_RestrictedFunctions",
  "title" : "Date Time: Restricted Functions",
  "description" : "Forbids the use of various native DateTime related PHP/WP functions and suggests alternatives."
}, {
  "patternId" : "WordPress_Files_FileName",
  "title" : "Files: File Name",
  "description" : "Ensures filenames do not contain underscores."
}, {
  "patternId" : "WordPress_NamingConventions_PrefixAllGlobals",
  "title" : "Naming Conventions: Prefix All Globals (Deprecated)",
  "description" : "Verify that everything defined in the global namespace is prefixed with a theme/plugin specific prefix."
}, {
  "patternId" : "WordPress_NamingConventions_ValidFunctionName",
  "title" : "Naming Conventions: Valid Function Name (Deprecated)",
  "description" : "Enforces WordPress function name and method name format, based upon Squiz code."
}, {
  "patternId" : "WordPress_NamingConventions_ValidHookName",
  "title" : "Naming Conventions: Valid Hook Name",
  "description" : "Use lowercase letters in action and filter names. Separate words via underscores."
}, {
  "patternId" : "WordPress_NamingConventions_ValidPostTypeSlug",
  "title" : "Naming Conventions: Valid Post Type Slug",
  "description" : "Validates post type names."
}, {
  "patternId" : "WordPress_NamingConventions_ValidVariableName",
  "title" : "Naming Conventions: Valid Variable Name",
  "description" : "Checks the naming of variables and member variables."
}, {
  "patternId" : "WordPress_PHP_DevelopmentFunctions",
  "title" : "PHP: Development Functions",
  "description" : "Restrict the use of various development functions."
}, {
  "patternId" : "WordPress_PHP_DisallowShortTernary",
  "title" : "PHP: Disallow Short Ternary",
  "description" : "Disallow the use of short ternaries."
}, {
  "patternId" : "WordPress_PHP_DiscouragedPHPFunctions",
  "title" : "PHP: Discouraged PHP Functions",
  "description" : "Discourages the use of various native PHP functions and suggests alternatives."
}, {
  "patternId" : "WordPress_PHP_DontExtract",
  "title" : "PHP: Dont Extract",
  "description" : "Restricts the usage of extract()."
}, {
  "patternId" : "WordPress_PHP_IniSet",
  "title" : "PHP: Ini Set",
  "description" : "Detect use of the `ini_set()` function."
}, {
  "patternId" : "WordPress_PHP_NoSilencedErrors",
  "title" : "PHP: No Silenced Errors",
  "description" : "Discourage the use of the PHP error silencing operator."
}, {
  "patternId" : "WordPress_PHP_POSIXFunctions",
  "title" : "PHP: POSIX Functions",
  "description" : "Perl compatible regular expressions (PCRE, preg_ functions) should be used in preference\nto their POSIX counterparts."
}, {
  "patternId" : "WordPress_PHP_PregQuoteDelimiter",
  "title" : "PHP: Preg Quote Delimiter",
  "description" : "Flag calling preg_quote() without the second ($delimiter) parameter."
}, {
  "patternId" : "WordPress_PHP_RestrictedPHPFunctions",
  "title" : "PHP: Restricted PHP Functions",
  "description" : "Forbids the use of various native PHP functions and suggests alternatives."
}, {
  "patternId" : "WordPress_PHP_StrictComparisons",
  "title" : "PHP: Strict Comparisons",
  "description" : "Enforces Strict Comparison checks, based upon Squiz code."
}, {
  "patternId" : "WordPress_PHP_StrictInArray",
  "title" : "PHP: Strict In Array",
  "description" : "Flag calling in_array(), array_search() and array_keys() without true as the third parameter."
}, {
  "patternId" : "WordPress_PHP_TypeCasts",
  "title" : "PHP: Type Casts",
  "description" : "Verifies the correct usage of type cast keywords."
}, {
  "patternId" : "WordPress_PHP_YodaConditions",
  "title" : "PHP: Yoda Conditions",
  "description" : "Enforces Yoda conditional statements."
}, {
  "patternId" : "WordPress_Security_EscapeOutput",
  "title" : "Security: Escape Output",
  "description" : "Verifies that all outputted strings are escaped."
}, {
  "patternId" : "WordPress_Security_NonceVerification",
  "title" : "Security: Nonce Verification",
  "description" : "Checks that nonce verification accompanies form processing."
}, {
  "patternId" : "WordPress_Security_PluginMenuSlug",
  "title" : "Security: Plugin Menu Slug",
  "description" : "Warn about __FILE__ for page registration."
}, {
  "patternId" : "WordPress_Security_SafeRedirect",
  "title" : "Security: Safe Redirect",
  "description" : "Encourages use of wp_safe_redirect() to avoid open redirect vulnerabilities."
}, {
  "patternId" : "WordPress_Security_ValidatedSanitizedInput",
  "title" : "Security: Validated Sanitized Input",
  "description" : "Flag any non-validated/sanitized input ( _GET / _POST / etc. )."
}, {
  "patternId" : "WordPress_Utils_I18nTextDomainFixer",
  "title" : "Utils: I18n Text Domain Fixer",
  "description" : "Comprehensive I18n text domain fixer tool."
}, {
  "patternId" : "WordPress_WP_AlternativeFunctions",
  "title" : "WP: Alternative Functions",
  "description" : "Discourages the use of various functions and suggests (WordPress) alternatives."
}, {
  "patternId" : "WordPress_WP_CapitalPDangit",
  "title" : "WP: Capital P Dangit",
  "description" : "Capital P Dangit!"
}, {
  "patternId" : "WordPress_WP_CronInterval",
  "title" : "WP: Cron Interval",
  "description" : "Flag cron schedules less than 15 minutes."
}, {
  "patternId" : "WordPress_WP_DeprecatedClasses",
  "title" : "WP: Deprecated Classes",
  "description" : "Restricts the use of deprecated WordPress classes and suggests alternatives."
}, {
  "patternId" : "WordPress_WP_DeprecatedFunctions",
  "title" : "WP: Deprecated Functions",
  "description" : "Restricts the use of various deprecated WordPress functions and suggests alternatives."
}, {
  "patternId" : "WordPress_WP_DeprecatedParameterValues",
  "title" : "WP: Deprecated Parameter Values",
  "description" : "Check for usage of deprecated parameter values in WP functions and provide alternative based on the parameter passed."
}, {
  "patternId" : "WordPress_WP_DeprecatedParameters",
  "title" : "WP: Deprecated Parameters",
  "description" : "Check for usage of deprecated parameters in WP functions and suggest alternative based on the parameter passed."
}, {
  "patternId" : "WordPress_WP_DiscouragedConstants",
  "title" : "WP: Discouraged Constants",
  "description" : "Warns against usage of discouraged WP CONSTANTS and recommends alternatives."
}, {
  "patternId" : "WordPress_WP_DiscouragedFunctions",
  "title" : "WP: Discouraged Functions",
  "description" : "Discourages the use of various WordPress functions and suggests alternatives."
}, {
  "patternId" : "WordPress_WP_EnqueuedResourceParameters",
  "title" : "WP: Enqueued Resource Parameters",
  "description" : "This checks the enqueued 4th and 5th parameters to make sure the version and in_footer are set."
}, {
  "patternId" : "WordPress_WP_EnqueuedResources",
  "title" : "WP: Enqueued Resources",
  "description" : "Makes sure scripts and styles are enqueued and not explicitly echo'd."
}, {
  "patternId" : "WordPress_WP_GlobalVariablesOverride",
  "title" : "WP: Global Variables Override",
  "description" : "Warns about overwriting WordPress native global variables."
}, {
  "patternId" : "WordPress_WP_I18n",
  "title" : "WP: I18n",
  "description" : "Makes sure WP internationalization functions are used properly."
}, {
  "patternId" : "WordPress_WP_PostsPerPage",
  "title" : "WP: Posts Per Page",
  "description" : "Flag returning high or infinite posts_per_page."
}, {
  "patternId" : "WordPress_WP_TimezoneChange",
  "title" : "WP: Timezone Change (Deprecated)",
  "description" : "Disallow the changing of timezone."
}, {
  "patternId" : "WordPress_WhiteSpace_CastStructureSpacing",
  "title" : "White Space: Cast Structure Spacing",
  "description" : "Ensure cast statements are preceded by whitespace."
}, {
  "patternId" : "WordPress_WhiteSpace_ControlStructureSpacing",
  "title" : "White Space: Control Structure Spacing",
  "description" : "Enforces spacing around logical operators and assignments, based upon Squiz code."
}, {
  "patternId" : "WordPress_WhiteSpace_DisallowInlineTabs",
  "title" : "White Space: Disallow Inline Tabs",
  "description" : "Enforces using spaces for mid-line alignment."
}, {
  "patternId" : "WordPress_WhiteSpace_OperatorSpacing",
  "title" : "White Space: Operator Spacing",
  "description" : "Verify operator spacing, uses the Squiz sniff, but additionally also sniffs for the `!` (boolean not) operator."
}, {
  "patternId" : "WordPress_WhiteSpace_PrecisionAlignment",
  "title" : "White Space: Precision Alignment",
  "description" : "Warn on line indentation ending with spaces for precision alignment."
}, {
  "patternId" : "Zend_Debug_CodeAnalyzer",
  "title" : "Zend Code Analyzer",
  "description" : "PHP Code should pass the zend code analyzer."
}, {
  "patternId" : "Zend_Files_ClosingTag",
  "title" : "Closing PHP Tags",
  "description" : "Files should not have closing php tags."
}, {
  "patternId" : "Zend_NamingConventions_ValidVariableName",
  "title" : "Variable Names",
  "description" : "Variable names should be camelCased with the first letter lowercase.  Private and protected member variables should begin with an underscore"
} ]